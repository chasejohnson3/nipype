# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import (CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec,
                    File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath)
import os


class GenerateEdgeMapImageInputSpec(CommandLineInputSpec):
    inputMRVolumes = InputMultiPath(File(exists=True), argstr="--inputMRVolumes %s...", desc="Input image files names")
    inputMask = File(argstr="--inputMask %s", desc="Input mask file name. If set, image histogram percentiles will be calculated within the mask", exists=True)
    outputMaximumGradientImage = traits.Either(traits.Bool, File(), argstr="--outputMaximumGradientImage %s", desc="output gradient image file name", hash_files=False)
    outputEdgeMap = traits.Either(traits.Bool, File(), argstr="--outputEdgeMap %s", desc="output edgemap file name", hash_files=False)
    lowerPercentileMatching = traits.Float(argstr="--lowerPercentileMatching %f", desc="Map lower quantile and below to minOutputRange. It should be a value between zero and one.")
    upperPercentileMatching = traits.Float(argstr="--upperPercentileMatching %f", desc="Map upper quantile and above to maxOutputRange. It should be a value between zero and one.")
    minimumOutputRange = traits.Int(argstr="--minimumOutputRange %d", desc="Map lower quantile and below to minimum output range. It should be an epsilon number greater than zero. Default is 1.")
    maximumOutputRange = traits.Int(argstr="--maximumOutputRange %d", desc="Map upper quantile and above to maximum output range. Default is 255 that is the maximum range of unsigned char.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class GenerateEdgeMapImageOutputSpec(TraitedSpec):
    outputMaximumGradientImage = File(desc="output gradient image file name", exists=True)
    outputEdgeMap = File(desc="output edgemap file name", exists=True)


class GenerateEdgeMapImage(SEMLikeCommandLine):
    """title: GenerateEdgeMapImage

category: SuperResolution

description: Inverse of Maximum Gradient Image

version: 5.2.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Ali Ghayoor

"""

    input_spec = GenerateEdgeMapImageInputSpec
    output_spec = GenerateEdgeMapImageOutputSpec
    _cmd = " GenerateEdgeMapImage "
    _outputs_filenames = {'outputMaximumGradientImage':'outputMaximumGradientImage.nii.gz','outputEdgeMap':'outputEdgeMap.nii.gz'}
    _redirect_x = False
