# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import (CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec,
                    File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath)
import os


class ExpertAutomatedRegistrationInputSpec(CommandLineInputSpec):
    fixedImage = File(argstr="%s", desc="Image which defines the space into which the moving image is registered", position=-2, exists=True)
    movingImage = File(argstr="%s", desc="The transform goes from the fixed image's space into the moving image's space", position=-1, exists=True)
    resampledImage = traits.Either(traits.Bool, File(), argstr="--resampledImage %s", desc="Registration results", hash_files=False)
    loadTransform = File(argstr="--loadTransform %s", desc="Load a transform that is immediately applied to the moving image", exists=True)
    saveTransform = traits.Either(traits.Bool, File(), argstr="--saveTransform %s", desc="Save the transform that results from registration", hash_files=False)
    initialization = traits.Enum("None", "Landmarks", "ImageCenters", "CentersOfMass", "SecondMoments", argstr="--initialization %s", desc="Method to prime the registration process")
    registration = traits.Enum("None", "Initial", "Rigid", "Affine", "BSpline", "PipelineRigid", "PipelineAffine", "PipelineBSpline", argstr="--registration %s", desc="Method for the registration process")
    metric = traits.Enum("MattesMI", "NormCorr", "MeanSqrd", argstr="--metric %s", desc="Method to quantify image match")
    expectedOffset = traits.Float(argstr="--expectedOffset %f", desc="Expected misalignment after initialization")
    expectedRotation = traits.Float(argstr="--expectedRotation %f", desc="Expected misalignment after initialization")
    expectedScale = traits.Float(argstr="--expectedScale %f", desc="Expected misalignment after initialization")
    expectedSkew = traits.Float(argstr="--expectedSkew %f", desc="Expected misalignment after initialization")
    verbosityLevel = traits.Enum("Silent", "Standard", "Verbose", argstr="--verbosityLevel %s", desc="Level of detail of reporting progress")
    sampleFromOverlap = traits.Bool(argstr="--sampleFromOverlap ", desc="Limit metric evaluation to the fixed image region overlapped by the moving image")
    fixedImageMask = File(argstr="--fixedImageMask %s", desc="Image which defines a mask for the fixed image", exists=True)
    randomNumberSeed = traits.Int(argstr="--randomNumberSeed %d", desc="Seed to generate a consistent random number sequence")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Number of CPU threads to use")
    minimizeMemory = traits.Bool(argstr="--minimizeMemory ", desc="Reduce the amount of memory required at the cost of increased computation time")
    interpolation = traits.Enum("NearestNeighbor", "Linear", "BSpline", argstr="--interpolation %s", desc="Method for interpolation within the optimization process")
    fixedLandmarks = InputMultiPath(traits.List(traits.Float(), minlen=3, maxlen=3), argstr="--fixedLandmarks %s...", desc="Ordered list of landmarks in the fixed image")
    movingLandmarks = InputMultiPath(traits.List(traits.Float(), minlen=3, maxlen=3), argstr="--movingLandmarks %s...", desc="Ordered list of landmarks in the moving image")
    rigidMaxIterations = traits.Int(argstr="--rigidMaxIterations %d", desc="Maximum number of rigid optimization iterations")
    rigidSamplingRatio = traits.Float(argstr="--rigidSamplingRatio %f", desc="Portion of the image to use in computing the metric during rigid registration")
    affineMaxIterations = traits.Int(argstr="--affineMaxIterations %d", desc="Maximum number of affine optimization iterations")
    affineSamplingRatio = traits.Float(argstr="--affineSamplingRatio %f", desc="Portion of the image to use in computing the metric during affine registration")
    bsplineMaxIterations = traits.Int(argstr="--bsplineMaxIterations %d", desc="Maximum number of bspline optimization iterations")
    bsplineSamplingRatio = traits.Float(argstr="--bsplineSamplingRatio %f", desc="Portion of the image to use in computing the metric during BSpline registration")
    controlPointSpacing = traits.Int(argstr="--controlPointSpacing %d", desc="Number of pixels between control points")


class ExpertAutomatedRegistrationOutputSpec(TraitedSpec):
    resampledImage = File(desc="Registration results", exists=True)
    saveTransform = File(desc="Save the transform that results from registration", exists=True)


class ExpertAutomatedRegistration(SEMLikeCommandLine):
    """title: Expert Automated Registration

category: Legacy.Registration

description: Provides rigid, affine, and BSpline registration methods via a simple GUI

version: 0.1.0.$Revision: 2104 $(alpha)

documentation-url: http://www.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/ExpertAutomatedRegistration

contributor: Stephen R Aylward (Kitware), Casey B Goodlett (Kitware)

acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.

"""

    input_spec = ExpertAutomatedRegistrationInputSpec
    output_spec = ExpertAutomatedRegistrationOutputSpec
    _cmd = " ExpertAutomatedRegistration "
    _outputs_filenames = {'resampledImage':'resampledImage.nii','saveTransform':'saveTransform.txt'}
    _redirect_x = False


class TestGridTransformRegistrationInputSpec(CommandLineInputSpec):
    gridSize = traits.Int(argstr="--gridSize %d", desc="Number of grid points on interior of image.")
    outputtransform = traits.Either(traits.Bool, File(), argstr="--outputtransform %s", desc="The grid transform (deformation vector field).", hash_files=False)
    FixedImageFileName = File(argstr="%s", desc="Fixed image to which to register", position=-2, exists=True)
    MovingImageFileName = File(argstr="%s", desc="Moving image", position=-1, exists=True)


class TestGridTransformRegistrationOutputSpec(TraitedSpec):
    outputtransform = File(desc="The grid transform (deformation vector field).", exists=True)


class TestGridTransformRegistration(SEMLikeCommandLine):
    """title: Test GridTransform registration

category: Legacy.Registration

description: Generates a GridTransform to test the communication facilities

version: 0.1.0.$Revision: 6760 $(alpha)

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/TestGridTransformRegistration

contributor: Yinglin Lee (SPL, BWH)

acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.

"""

    input_spec = TestGridTransformRegistrationInputSpec
    output_spec = TestGridTransformRegistrationOutputSpec
    _cmd = " TestGridTransformRegistration "
    _outputs_filenames = {'outputtransform':'outputtransform.nrrd'}
    _redirect_x = False
