# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import (CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec,
                    File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath)
import os


class compareTractInclusionInputSpec(CommandLineInputSpec):
    testFiber = File(argstr="--testFiber %s", desc="Required: test fiber tract file name", exists=True)
    standardFiber = File(argstr="--standardFiber %s", desc="Required: standard fiber tract file name", exists=True)
    closeness = traits.Float(argstr="--closeness %f", desc="Closeness of every test fiber to some fiber in the standard tract, computed as a sum of squares of spatial differences of standard points")
    numberOfPoints = traits.Int(argstr="--numberOfPoints %d", desc="Number of points in comparison fiber pairs")
    testForBijection = traits.Bool(argstr="--testForBijection ", desc="Flag to apply the closeness criterion both ways")
    testForFiberCardinality = traits.Bool(argstr="--testForFiberCardinality ", desc="Flag to require the same number of fibers in both tracts")
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of XML files when reading and writing vtkPolyData.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class compareTractInclusionOutputSpec(TraitedSpec):
    pass


class compareTractInclusion(SEMLikeCommandLine):
    """title: Compare Tracts

category: Diffusion.GTRACT

description: This program will halt with a status code indicating whether a test tract is nearly enough included in a standard tract in the sense that every fiber in the test tract has a low enough sum of squares distance to some fiber in the standard tract modulo spline resampling of every fiber to a fixed number of points.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = compareTractInclusionInputSpec
    output_spec = compareTractInclusionOutputSpec
    _cmd = " compareTractInclusion "
    _outputs_filenames = {}
    _redirect_x = False


class extractNrrdVectorIndexInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input file containing the vector that will be extracted", exists=True)
    vectorIndex = traits.Int(argstr="--vectorIndex %d", desc="Index in the vector image to extract")
    setImageOrientation = traits.Enum("AsAcquired", "Axial", "Coronal", "Sagittal", argstr="--setImageOrientation %s", desc="Sets the image orientation of the extracted vector (Axial, Coronal, Sagittal)")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the vector image at the given index", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class extractNrrdVectorIndexOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the vector image at the given index", exists=True)


class extractNrrdVectorIndex(SEMLikeCommandLine):
    """title: Extract Nrrd Index

category: Diffusion.GTRACT

description: This program will extract a 3D image (single vector) from a vector 3D image at a given vector index.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = extractNrrdVectorIndexInputSpec
    output_spec = extractNrrdVectorIndexOutputSpec
    _cmd = " extractNrrdVectorIndex "
    _outputs_filenames = {'outputVolume':'outputVolume.nii'}
    _redirect_x = False


class gtractAnisotropyMapInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input file containing the diffusion tensor image", exists=True)
    anisotropyType = traits.Enum("ADC", "FA", "RA", "VR", "AD", "RD", "LI", argstr="--anisotropyType %s", desc="Anisotropy Mapping Type: ADC, FA, RA, VR, AD, RD, LI")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the selected kind of anisotropy scalar.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractAnisotropyMapOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the selected kind of anisotropy scalar.", exists=True)


class gtractAnisotropyMap(SEMLikeCommandLine):
    """title: Anisotropy Map

category: Diffusion.GTRACT

description: This program will generate a scalar map of anisotropy, given a tensor representation. Anisotropy images are used for fiber tracking, but the anisotropy scalars are not defined along the path. Instead, the tensor representation is included as point data allowing all of these metrics to be computed using only the fiber tract point data. The images can be saved in any ITK supported format, but it is suggested that you use an image format that supports the definition of the image origin. This includes NRRD, NifTI, and Meta formats. These images can also be used for scalar analysis including regional anisotropy measures or VBM style analysis.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractAnisotropyMapInputSpec
    output_spec = gtractAnisotropyMapOutputSpec
    _cmd = " gtractAnisotropyMap "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractAverageBvaluesInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input image file name containing multiple baseline gradients to average", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing directly averaged baseline images", hash_files=False)
    directionsTolerance = traits.Float(argstr="--directionsTolerance %f", desc="Tolerance for matching identical gradient direction pairs")
    averageB0only = traits.Bool(argstr="--averageB0only ", desc="Average only baseline gradients. All other gradient directions are not averaged, but retained in the outputVolume")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractAverageBvaluesOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing directly averaged baseline images", exists=True)


class gtractAverageBvalues(SEMLikeCommandLine):
    """title: Average B-Values

category: Diffusion.GTRACT

description: This program will directly average together the baseline gradients (b value equals 0) within a DWI scan. This is usually used after gtractCoregBvalues.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractAverageBvaluesInputSpec
    output_spec = gtractAverageBvaluesOutputSpec
    _cmd = " gtractAverageBvalues "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractClipAnisotropyInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input image file name", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the clipped anisotropy image", hash_files=False)
    clipFirstSlice = traits.Bool(argstr="--clipFirstSlice ", desc="Clip the first slice of the anisotropy image")
    clipLastSlice = traits.Bool(argstr="--clipLastSlice ", desc="Clip the last slice of the anisotropy image")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractClipAnisotropyOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the clipped anisotropy image", exists=True)


class gtractClipAnisotropy(SEMLikeCommandLine):
    """title: Clip Anisotropy

category: Diffusion.GTRACT

description: This program will zero the first and/or last slice of an anisotropy image, creating a clipped anisotropy image.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractClipAnisotropyInputSpec
    output_spec = gtractClipAnisotropyOutputSpec
    _cmd = " gtractClipAnisotropy "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractCoRegAnatomyInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input vector image file name. It is recommended that the input volume is the skull stripped baseline image of the DWI scan.", exists=True)
    inputAnatomicalVolume = File(argstr="--inputAnatomicalVolume %s", desc="Required: input anatomical image file name. It is recommended that that the input anatomical image has been skull stripped and has the same orientation as the DWI scan.", exists=True)
    vectorIndex = traits.Int(argstr="--vectorIndex %d", desc="Vector image index in the moving image (within the DWI) to be used for registration.")
    inputRigidTransform = File(argstr="--inputRigidTransform %s", desc="Required (for B-Spline type co-registration): input rigid transform file name. Used as a starting point for the anatomical B-Spline registration.", exists=True)
    outputTransformName = traits.Either(traits.Bool, File(), argstr="--outputTransformName %s", desc="Required: filename for the  fit transform.", hash_files=False)
    transformType = traits.Enum("Rigid", "Bspline", argstr="--transformType %s", desc="Transform Type: Rigid|Bspline")
    numberOfIterations = traits.Int(argstr="--numberOfIterations %d", desc="Number of iterations in the selected 3D fit")
    gridSize = InputMultiPath(traits.Int, argstr="--gridSize %s", desc="Number of grid subdivisions in all 3 directions", sep=",")
    borderSize = traits.Int(argstr="--borderSize %d", desc="Size of border")
    numberOfHistogramBins = traits.Int(argstr="--numberOfHistogramBins %d", desc="Number of histogram bins")
    spatialScale = traits.Int(argstr="--spatialScale %d", desc="Scales the number of voxels in the image by this value to specify the number of voxels used in the registration")
    convergence = traits.Float(argstr="--convergence %f", desc="Convergence Factor")
    gradientTolerance = traits.Float(argstr="--gradientTolerance %f", desc="Gradient Tolerance")
    maxBSplineDisplacement = traits.Float(argstr="--maxBSplineDisplacement %f", desc=" Sets the maximum allowed displacements in image physical coordinates for BSpline control grid along each axis.  A value of 0.0 indicates that the problem should be unbounded.  NOTE:  This only constrains the BSpline portion, and does not limit the displacement from the associated bulk transform.  This can lead to a substantial reduction in computation time in the BSpline optimizer.,       ")
    maximumStepSize = traits.Float(argstr="--maximumStepSize %f", desc="Maximum permitted step size to move in the selected 3D fit")
    minimumStepSize = traits.Float(argstr="--minimumStepSize %f", desc="Minimum required step size to move in the selected 3D fit without converging -- decrease this to make the fit more exacting")
    translationScale = traits.Float(argstr="--translationScale %f", desc="How much to scale up changes in position compared to unit rotational changes in radians -- decrease this to put more translation in the fit")
    relaxationFactor = traits.Float(argstr="--relaxationFactor %f", desc="Fraction of gradient from Jacobian to attempt to move in the selected 3D fit")
    numberOfSamples = traits.Int(argstr="--numberOfSamples %d", desc="The number of voxels sampled for mutual information computation.  Increase this for a slower, more careful fit. NOTE that it is suggested to use samplingPercentage instead of this option. However, if set, it overwrites the samplingPercentage option.  ")
    samplingPercentage = traits.Float(argstr="--samplingPercentage %f", desc="This is a number in (0.0,1.0] interval that shows the percentage of the input fixed image voxels that are sampled for mutual information computation.  Increase this for a slower, more careful fit. You can also limit the sampling focus with ROI masks and ROIAUTO mask generation. The default is to use approximately 5% of voxels (for backwards compatibility 5% ~= 500000/(256*256*256)). Typical values range from 1% for low detail images to 20% for high detail images.")
    useMomentsAlign = traits.Bool(argstr="--useMomentsAlign ", desc="MomentsAlign assumes that the center of mass of the images represent similar structures.  Perform a MomentsAlign registration as part of the sequential registration steps.   This option MUST come first, and CAN NOT be used with either CenterOfHeadLAlign, GeometryAlign, or initialTransform file.  This family of options superceeds the use of transformType if any of them are set.")
    useGeometryAlign = traits.Bool(argstr="--useGeometryAlign ", desc="GeometryAlign on assumes that the center of the voxel lattice of the images represent similar structures. Perform a GeometryCenterAlign registration as part of the sequential registration steps.   This option MUST come first, and CAN NOT be used with either MomentsAlign, CenterOfHeadAlign, or initialTransform file.  This family of options superceeds the use of transformType if any of them are set.")
    useCenterOfHeadAlign = traits.Bool(argstr="--useCenterOfHeadAlign ", desc="CenterOfHeadAlign attempts to find a hemisphere full of foreground voxels from the superior direction as an estimate of where the center of a head shape would be to drive a center of mass estimate.  Perform a CenterOfHeadAlign registration as part of the sequential registration steps.   This option MUST come first, and CAN NOT be used with either MomentsAlign, GeometryAlign, or initialTransform file.  This family of options superceeds the use of transformType if any of them are set.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractCoRegAnatomyOutputSpec(TraitedSpec):
    outputTransformName = File(desc="Required: filename for the  fit transform.", exists=True)


class gtractCoRegAnatomy(SEMLikeCommandLine):
    """title: Coregister B0 to Anatomy B-Spline

category: Diffusion.GTRACT

description: This program will register a Nrrd diffusion weighted 4D vector image to a fixed anatomical image. Two registration methods are supported for alignment with anatomical images: Rigid and B-Spline. The rigid registration performs a rigid body registration with the anatomical images and should be done as well to initialize the B-Spline transform. The B-SPline transform is the deformable transform, where the user can control the amount of deformation based on the number of control points as well as the maximum distance that these points can move. The B-Spline registration places a low dimensional grid in the image, which is deformed. This allows for some susceptibility related distortions to be removed from the diffusion weighted images. In general the amount of motion in the slice selection and read-out directions direction should be kept low. The distortion is in the phase encoding direction in the images. It is recommended that skull stripped (i.e. image containing only brain with skull removed) images shoud be used for image co-registration with the B-Spline transform.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCoRegAnatomyInputSpec
    output_spec = gtractCoRegAnatomyOutputSpec
    _cmd = " gtractCoRegAnatomy "
    _outputs_filenames = {'outputTransformName':'outputTransformName.h5'}
    _redirect_x = False


class gtractCoRegAnatomyBsplineInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input vector image file name. It is recommended that the input volume is the skull stripped baseline image of the DWI scan.", exists=True)
    inputAnatomicalVolume = File(argstr="--inputAnatomicalVolume %s", desc="Required: input anatomical image file name. It is recommended that that the input anatomical image has been skull stripped and has the same orientation as the DWI scan.", exists=True)
    vectorIndex = traits.Int(argstr="--vectorIndex %d", desc="Vector image index in the moving image (within the DWI) to be used for registration.")
    inputRigidTransform = File(argstr="--inputRigidTransform %s", desc="Required (for B-Spline type co-registration): input rigid transform file name. Used as a starting point for the anatomical B-Spline registration.", exists=True)
    outputBsplineTransform = traits.Either(traits.Bool, File(), argstr="--outputBsplineTransform %s", desc="Required: filename for the B-Spline fit transform.", hash_files=False)
    numberOfIterations = traits.Int(argstr="--numberOfIterations %d", desc="Number of iterations in the selected 3D fit")
    gridSize = InputMultiPath(traits.Int, argstr="--gridSize %s", desc="Number of grid subdivisions in all 3 directions", sep=",")
    borderSize = traits.Int(argstr="--borderSize %d", desc="Size of border")
    numberOfHistogramBins = traits.Int(argstr="--numberOfHistogramBins %d", desc="Number of histogram bins")
    spatialScale = traits.Int(argstr="--spatialScale %d", desc="Scales the number of voxels in the image by this value to specify the number of voxels used in the registration")
    convergence = traits.Float(argstr="--convergence %f", desc="Convergence Factor")
    gradientTolerance = traits.Float(argstr="--gradientTolerance %f", desc="Gradient Tolerance")
    maxBSplineDisplacement = traits.Float(argstr="--maxBSplineDisplacement %f", desc=" Sets the maximum allowed displacements in image physical coordinates for BSpline control grid along each axis.  A value of 0.0 indicates that the problem should be unbounded.  NOTE:  This only constrains the BSpline portion, and does not limit the displacement from the associated bulk transform.  This can lead to a substantial reduction in computation time in the BSpline optimizer.,       ")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractCoRegAnatomyBsplineOutputSpec(TraitedSpec):
    outputBsplineTransform = File(desc="Required: filename for the B-Spline fit transform.", exists=True)


class gtractCoRegAnatomyBspline(SEMLikeCommandLine):
    """title: Coregister B0 to Anatomy B-Spline

category: Diffusion.GTRACT

description: This program will register a NRRD diffusion weighted 4D vector image to a fixed anatomical image to produce a Bspline fit.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCoRegAnatomyBsplineInputSpec
    output_spec = gtractCoRegAnatomyBsplineOutputSpec
    _cmd = " gtractCoRegAnatomyBspline "
    _outputs_filenames = {'outputBsplineTransform':'outputBsplineTransform.h5'}
    _redirect_x = False


class gtractCoRegAnatomyRigidInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input vector image file name. It is recommended that the input volume is the skull stripped baseline image of the DWI scan.", exists=True)
    inputAnatomicalVolume = File(argstr="--inputAnatomicalVolume %s", desc="Required: input anatomical image file name. It is recommended that that the input anatomical image has been skull stripped and has the same orientation as the DWI scan.", exists=True)
    vectorIndex = traits.Int(argstr="--vectorIndex %d", desc="Vector image index in the moving image (within the DWI) to be used for registration.")
    outputRigidTransform = traits.Either(traits.Bool, File(), argstr="--outputRigidTransform %s", desc="Required: filename for the rigid fit transform.", hash_files=False)
    numberOfIterations = traits.Int(argstr="--numberOfIterations %d", desc="Number of iterations in the selected 3D fit")
    numberOfSamples = traits.Int(argstr="--numberOfSamples %d", desc="The number of voxels sampled for mutual information computation.  Increase this for a slower, more careful fit. NOTE that it is suggested to use samplingPercentage instead of this option. However, if set, it overwrites the samplingPercentage option.  ")
    samplingPercentage = traits.Float(argstr="--samplingPercentage %f", desc="This is a number in (0.0,1.0] interval that shows the percentage of the input fixed image voxels that are sampled for mutual information computation.  Increase this for a slower, more careful fit. You can also limit the sampling focus with ROI masks and ROIAUTO mask generation. The default is to use approximately 5% of voxels (for backwards compatibility 5% ~= 500000/(256*256*256)). Typical values range from 1% for low detail images to 20% for high detail images.")
    initialRotationAxis = traits.Int(argstr="--initialRotationAxis %d", desc="Axis for the initial rotation angle: 0, 1, 2 mean x, y, z, respectively.")
    initialRotationAngle = traits.Float(argstr="--initialRotationAngle %f", desc="Angle to rotate about the initial rotation angle (Degrees)")
    relaxationFactor = traits.Float(argstr="--relaxationFactor %f", desc="Fraction of gradient from Jacobian to attempt to move in the selected 3D fit")
    maximumStepSize = traits.Float(argstr="--maximumStepSize %f", desc="Maximum permitted step size to move in the selected 3D fit")
    minimumStepSize = traits.Float(argstr="--minimumStepSize %f", desc="Minimum required step size to move in the selected 3D fit without converging -- decrease this to make the fit more exacting")
    spatialScale = traits.Float(argstr="--spatialScale %f", desc="How much to scale up changes in position compared to unit rotational changes in radians -- decrease this to put more translation in the fit")


class gtractCoRegAnatomyRigidOutputSpec(TraitedSpec):
    outputRigidTransform = File(desc="Required: filename for the rigid fit transform.", exists=True)


class gtractCoRegAnatomyRigid(SEMLikeCommandLine):
    """title: Coregister B0 to Anatomy Rigid

category: Diffusion.GTRACT

description: This program will register a NRRD diffusion weighted 4D vector image to a fixed anatomical image to produce a rigid fit.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCoRegAnatomyRigidInputSpec
    output_spec = gtractCoRegAnatomyRigidOutputSpec
    _cmd = " gtractCoRegAnatomyRigid "
    _outputs_filenames = {'outputRigidTransform':'outputRigidTransform'}
    _redirect_x = False


class gtractConcatDwiInputSpec(CommandLineInputSpec):
    inputVolume = InputMultiPath(File(exists=True), argstr="--inputVolume %s...", desc="Required: input file containing the first diffusion weighted image")
    ignoreOrigins = traits.Bool(argstr="--ignoreOrigins ", desc="If image origins are different force all images to origin of first image")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the combined diffusion weighted images.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractConcatDwiOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the combined diffusion weighted images.", exists=True)


class gtractConcatDwi(SEMLikeCommandLine):
    """title: Concat DWI Images

category: Diffusion.GTRACT

description: This program will concatenate two DTI runs together.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractConcatDwiInputSpec
    output_spec = gtractConcatDwiOutputSpec
    _cmd = " gtractConcatDwi "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractCopyImageOrientationInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input file containing the signed short image to reorient without resampling.", exists=True)
    inputReferenceVolume = File(argstr="--inputReferenceVolume %s", desc="Required: input file containing orietation that will be cloned.", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD or Nifti file containing the reoriented image in reference image space.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractCopyImageOrientationOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD or Nifti file containing the reoriented image in reference image space.", exists=True)


class gtractCopyImageOrientation(SEMLikeCommandLine):
    """title: Copy Image Orientation

category: Diffusion.GTRACT

description: This program will copy the orientation from the reference image into the moving image. Currently, the registration process requires that the diffusion weighted images and the anatomical images have the same image orientation (i.e. Axial, Coronal, Sagittal). It is suggested that you copy the image orientation from the diffusion weighted images and apply this to the anatomical image. This image can be subsequently removed after the registration step is complete. We anticipate that this limitation will be removed in future versions of the registration programs.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCopyImageOrientationInputSpec
    output_spec = gtractCopyImageOrientationOutputSpec
    _cmd = " gtractCopyImageOrientation "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractCoregBvaluesInputSpec(CommandLineInputSpec):
    movingVolume = File(argstr="--movingVolume %s", desc="Required: input moving image file name. In order to register gradients within a scan to its first gradient, set the movingVolume and fixedVolume as the same image.", exists=True)
    fixedVolume = File(argstr="--fixedVolume %s", desc="Required: input fixed image file name. It is recommended that this image should either contain or be a b0 image.", exists=True)
    fixedVolumeIndex = traits.Int(argstr="--fixedVolumeIndex %d", desc="Index in the fixed image for registration. It is recommended that this image should be a b0 image.")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing moving images individually resampled and fit to the specified fixed image index.", hash_files=False)
    outputTransform = traits.Either(traits.Bool, File(), argstr="--outputTransform %s", desc="Registration 3D transforms concatenated in a single output file.  There are no tools that can use this, but can be used for debugging purposes.", hash_files=False)
    eddyCurrentCorrection = traits.Bool(argstr="--eddyCurrentCorrection ", desc="Flag to perform eddy current corection in addition to motion correction (recommended)")
    numberOfIterations = traits.Int(argstr="--numberOfIterations %d", desc="Number of iterations in each 3D fit")
    numberOfSpatialSamples = traits.Int(argstr="--numberOfSpatialSamples %d", desc="The number of voxels sampled for mutual information computation.  Increase this for a slower, more careful fit. NOTE that it is suggested to use samplingPercentage instead of this option. However, if set, it overwrites the samplingPercentage option.  ")
    samplingPercentage = traits.Float(argstr="--samplingPercentage %f", desc="This is a number in (0.0,1.0] interval that shows the percentage of the input fixed image voxels that are sampled for mutual information computation.  Increase this for a slower, more careful fit. You can also limit the sampling focus with ROI masks and ROIAUTO mask generation. The default is to use approximately 5% of voxels (for backwards compatibility 5% ~= 500000/(256*256*256)). Typical values range from 1% for low detail images to 20% for high detail images.")
    relaxationFactor = traits.Float(argstr="--relaxationFactor %f", desc="Fraction of gradient from Jacobian to attempt to move in each 3D fit step (adjust when eddyCurrentCorrection is enabled; suggested value = 0.25)")
    maximumStepSize = traits.Float(argstr="--maximumStepSize %f", desc="Maximum permitted step size to move in each 3D fit step (adjust when eddyCurrentCorrection is enabled; suggested value = 0.1)")
    minimumStepSize = traits.Float(argstr="--minimumStepSize %f", desc="Minimum required step size to move in each 3D fit step without converging -- decrease this to make the fit more exacting")
    spatialScale = traits.Float(argstr="--spatialScale %f", desc="How much to scale up changes in position compared to unit rotational changes in radians -- decrease this to put more rotation in the fit")
    registerB0Only = traits.Bool(argstr="--registerB0Only ", desc="Register the B0 images only")
    debugLevel = traits.Int(argstr="--debugLevel %d", desc="Display debug messages, and produce debug intermediate results.  0=OFF, 1=Minimal, 10=Maximum debugging.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractCoregBvaluesOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing moving images individually resampled and fit to the specified fixed image index.", exists=True)
    outputTransform = File(desc="Registration 3D transforms concatenated in a single output file.  There are no tools that can use this, but can be used for debugging purposes.", exists=True)


class gtractCoregBvalues(SEMLikeCommandLine):
    """title: Coregister B-Values

category: Diffusion.GTRACT

description: This step should be performed after converting DWI scans from DICOM to NRRD format. This program will register all gradients in a NRRD diffusion weighted 4D vector image (moving image) to a specified index in a fixed image. It also supports co-registration with a T2 weighted image or field map in the same plane as the DWI data. The fixed image for the registration should be a b0 image. A mutual information metric cost function is used for the registration because of the differences in signal intensity as a result of the diffusion gradients. The full affine allows the registration procedure to correct for eddy current distortions that may exist in the data. If the eddyCurrentCorrection is enabled, relaxationFactor (0.25) and maximumStepSize (0.1) should be adjusted.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCoregBvaluesInputSpec
    output_spec = gtractCoregBvaluesOutputSpec
    _cmd = " gtractCoregBvalues "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd','outputTransform':'outputTransform.h5'}
    _redirect_x = False


class gtractCostFastMarchingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input anisotropy image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required: input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds")
    outputCostVolume = traits.Either(traits.Bool, File(), argstr="--outputCostVolume %s", desc="Output vcl_cost image", hash_files=False)
    outputSpeedVolume = traits.Either(traits.Bool, File(), argstr="--outputSpeedVolume %s", desc="Output speed image", hash_files=False)
    anisotropyWeight = traits.Float(argstr="--anisotropyWeight %f", desc="Anisotropy weight used for vcl_cost function calculations")
    stoppingValue = traits.Float(argstr="--stoppingValue %f", desc="Terminiating value for vcl_cost function estimation")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold used for seed selection")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractCostFastMarchingOutputSpec(TraitedSpec):
    outputCostVolume = File(desc="Output vcl_cost image", exists=True)
    outputSpeedVolume = File(desc="Output speed image", exists=True)


class gtractCostFastMarching(SEMLikeCommandLine):
    """title: Cost Fast Marching

category: Diffusion.GTRACT

description: This program will use a fast marching fiber tracking algorithm to identify fiber tracts from a tensor image. This program is the first portion of the algorithm. The user must first run gtractFastMarchingTracking to generate the actual fiber tracts.  This algorithm is roughly based on the work by G. Parker et al. from IEEE Transactions On Medical Imaging, 21(5): 505-512, 2002. An additional feature of including anisotropy into the vcl_cost function calculation is included.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris. The original code here was developed by Daisy Espino.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCostFastMarchingInputSpec
    output_spec = gtractCostFastMarchingOutputSpec
    _cmd = " gtractCostFastMarching "
    _outputs_filenames = {'outputCostVolume':'outputCostVolume.nrrd','outputSpeedVolume':'outputSpeedVolume.nrrd'}
    _redirect_x = False


class gtractCreateGuideFiberInputSpec(CommandLineInputSpec):
    inputFiber = File(argstr="--inputFiber %s", desc="Required: input fiber tract file name", exists=True)
    numberOfPoints = traits.Int(argstr="--numberOfPoints %d", desc="Number of points in output guide fiber")
    outputFiber = traits.Either(traits.Bool, File(), argstr="--outputFiber %s", desc="Required: output guide fiber file name", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of XML files when reading and writing vtkPolyData.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractCreateGuideFiberOutputSpec(TraitedSpec):
    outputFiber = File(desc="Required: output guide fiber file name", exists=True)


class gtractCreateGuideFiber(SEMLikeCommandLine):
    """title: Create Guide Fiber

category: Diffusion.GTRACT

description: This program will create a guide fiber by averaging fibers from a previously generated tract.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractCreateGuideFiberInputSpec
    output_spec = gtractCreateGuideFiberOutputSpec
    _cmd = " gtractCreateGuideFiber "
    _outputs_filenames = {'outputFiber':'outputFiber.vtk'}
    _redirect_x = False


class gtractFastMarchingTrackingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input anisotropy image file name", exists=True)
    inputCostVolume = File(argstr="--inputCostVolume %s", desc="Required: input vcl_cost image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required: input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds")
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    numberOfIterations = traits.Int(argstr="--numberOfIterations %d", desc="Number of iterations used for the optimization")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold used for seed selection")
    trackingThreshold = traits.Float(argstr="--trackingThreshold %f", desc="Anisotropy threshold used for fiber tracking")
    costStepSize = traits.Float(argstr="--costStepSize %f", desc="Cost image sub-voxel sampling")
    maximumStepSize = traits.Float(argstr="--maximumStepSize %f", desc="Maximum step size to move when tracking")
    minimumStepSize = traits.Float(argstr="--minimumStepSize %f", desc="Minimum step size to move when tracking")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractFastMarchingTrackingOutputSpec(TraitedSpec):
    outputTract = File(desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractFastMarchingTracking(SEMLikeCommandLine):
    """title: Fast Marching Tracking

category: Diffusion.GTRACT

description: This program will use a fast marching fiber tracking algorithm to identify fiber tracts from a tensor image. This program is the second portion of the algorithm. The user must first run gtractCostFastMarching to generate the vcl_cost image. The second step of the algorithm implemented here is a gradient descent soplution from the defined ending region back to the seed points specified in gtractCostFastMarching. This algorithm is roughly based on the work by G. Parker et al. from IEEE Transactions On Medical Imaging, 21(5): 505-512, 2002. An additional feature of including anisotropy into the vcl_cost function calculation is included.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris. The original code here was developed by Daisy Espino.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractFastMarchingTrackingInputSpec
    output_spec = gtractFastMarchingTrackingOutputSpec
    _cmd = " gtractFastMarchingTracking "
    _outputs_filenames = {'outputTract':'outputTract.vtk'}
    _redirect_x = False


class gtractFiberTrackingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required (for Free, Streamline, GraphSearch, and Guided fiber tracking methods): input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required (for Free, Streamline, GraphSearch, and Guided fiber tracking methods): input anisotropy image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required (for Free, Streamline, GraphSearch, and Guided fiber tracking methods): input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds (required if Label number used to create seed point in Slicer was not 1)")
    inputEndingSeedsLabelMapVolume = File(argstr="--inputEndingSeedsLabelMapVolume %s", desc="Required (for Streamline, GraphSearch, and Guided fiber tracking methods): input ending seeds LabelMap image file name", exists=True)
    endingSeedsLabel = traits.Int(argstr="--endingSeedsLabel %d", desc="Label value for Ending Seeds (required if Label number used to create seed point in Slicer was not 1)")
    inputTract = File(argstr="--inputTract %s", desc="Required (for Guided fiber tracking method): guide fiber in vtkPolydata file containing one tract line.", exists=True)
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required (for Free, Streamline, GraphSearch, and Guided fiber tracking methods): name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    trackingMethod = traits.Enum("Guided", "Free", "Streamline", "GraphSearch", argstr="--trackingMethod %s", desc="Fiber tracking Filter Type: Guided|Free|Streamline|GraphSearch")
    guidedCurvatureThreshold = traits.Float(argstr="--guidedCurvatureThreshold %f", desc="Guided Curvature Threshold (Degrees)")
    maximumGuideDistance = traits.Float(argstr="--maximumGuideDistance %f", desc="Maximum distance for using the guide fiber direction")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold for seed selection (recommended for Free fiber tracking)")
    trackingThreshold = traits.Float(argstr="--trackingThreshold %f", desc="Anisotropy threshold for fiber tracking (anisotropy values of the next point along the path)")
    curvatureThreshold = traits.Float(argstr="--curvatureThreshold %f", desc="Curvature threshold in degrees (recommended for Free  fiber tracking)")
    branchingThreshold = traits.Float(argstr="--branchingThreshold %f", desc="Anisotropy Branching threshold (recommended for GraphSearch fiber tracking method)")
    maximumBranchPoints = traits.Int(argstr="--maximumBranchPoints %d", desc="Maximum branch points (recommended for GraphSearch fiber tracking method)")
    useRandomWalk = traits.Bool(argstr="--useRandomWalk ", desc="Flag to use random walk.")
    randomSeed = traits.Int(argstr="--randomSeed %d", desc="Random number generator seed")
    branchingAngle = traits.Float(argstr="--branchingAngle %f", desc="Branching angle in degrees (recommended for GraphSearch fiber tracking method)")
    minimumLength = traits.Float(argstr="--minimumLength %f", desc="Minimum fiber length. Helpful for filtering invalid tracts.")
    maximumLength = traits.Float(argstr="--maximumLength %f", desc="Maximum fiber length (voxels)")
    stepSize = traits.Float(argstr="--stepSize %f", desc="Fiber tracking step size")
    useLoopDetection = traits.Bool(argstr="--useLoopDetection ", desc="Flag to make use of loop detection.")
    useTend = traits.Bool(argstr="--useTend ", desc="Flag to make use of Tend F and Tend G parameters.")
    tendF = traits.Float(argstr="--tendF %f", desc="Tend F parameter")
    tendG = traits.Float(argstr="--tendG %f", desc="Tend G parameter")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractFiberTrackingOutputSpec(TraitedSpec):
    outputTract = File(desc="Required (for Free, Streamline, GraphSearch, and Guided fiber tracking methods): name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractFiberTracking(SEMLikeCommandLine):
    """title: Fiber Tracking

category: Diffusion.GTRACT

description: This program implements four fiber tracking methods (Free, Streamline, GraphSearch, Guided). The output of the fiber tracking is vtkPolyData (i.e. Polylines) that can be loaded into Slicer3 for visualization. The poly data can be saved in either old VTK format files (.vtk) or in the new VTK XML format (.xml). The polylines contain point data that defines ther Tensor at each point along the fiber tract. This can then be used to rendered as glyphs in Slicer3 and can be used to define severeal scalar measures without referencing back to the anisotropy images. (1) Free tracking is a basic streamlines algorithm. This is a direct implementation of the method original proposed by Basser et al. The tracking follows the primarty eigenvector. The tracking begins with seed points in the starting region. Only those voxels above the specified anisotropy threshold in the starting region are used as seed points. Tracking terminates either as a result of maximum fiber length, low ansiotropy, or large curvature. This is a great way to explore your data. (2) The streamlines algorithm is a direct implementation of the method originally proposed by Basser et al. The tracking follows the primary eigenvector. The tracking begins with seed points in the starting region. Only those voxels above the specified anisotropy threshold in the starting region are used as seed points. Tracking terminates either by reaching the ending region or reaching some stopping criteria. Stopping criteria are specified using the following parameters: tracking threshold, curvature threshold, and max length. Only paths terminating in the ending region are kept in this method. The TEND algorithm proposed by Lazar et al. (Human Brain Mapping 18:306-321, 2003) has been instrumented. This can be enabled using the --useTend option while performing Streamlines tracking. This utilizes the entire diffusion tensor to deflect the incoming vector instead of simply following the primary eigenvector. The TEND parameters are set using the --tendF and --tendG options. (3) Graph Search tracking is the first step in the full GTRACT algorithm developed by Cheng et al. (NeuroImage 31(3): 1075-1085, 2006) for finding the tracks in a tensor image. This method was developed to generate fibers in a Tensor representation where crossing fibers occur. The graph search algorithm follows the primary eigenvector in non-ambigous regions and utilizes branching and a graph search algorithm in ambigous regions. Ambiguous tracking regions are defined based on two criteria: Branching Al Threshold (anisotropy values below this value and above the traching threshold) and Curvature Major Eigen (angles of the primary eigenvector direction and the current tracking direction). In regions that meet this criteria, two or three tracking paths are considered. The first is the standard primary eigenvector direction. The second is the seconadary eigenvector direction. This is based on the assumption that these regions may be prolate regions. If the Random Walk option is selected then a third direction is also considered. This direction is defined by a cone pointing from the current position to the centroid of the ending region. The interior angle of the cone is specified by the user with the Branch/Guide Angle parameter. A vector contained inside of the cone is selected at random and used as the third direction. This method can also utilize the TEND option where the primary tracking direction is that specified by the TEND method instead of the primary eigenvector. The parameter '--maximumBranchPoints' allows the tracking to have this number of branches being considered at a time. If this number of branch points is exceeded at any time, then the algorithm will revert back to a streamline alogrithm until the number of branches is reduced. This allows the user to constrain the computational complexity of the algorithm. (4) The second phase of the GTRACT algorithm is Guided Tracking. This method incorporates anatomical information about the track orientation using an initial guess of the fiber track. In the originally proposed GTRACT method, this would be created from the fibers resulting from the Graph Search tracking. However, in practice this can be created using any method and could be defined manually. To create the guide fiber the program gtractCreateGuideFiber can be used. This program will load a fiber tract that has been generated and create a centerline representation of the fiber tract (i.e. a single fiber). In this method, the fiber tracking follows the primary eigenvector direction unless it deviates from the guide fiber track by a angle greater than that specified by the '--guidedCurvatureThreshold' parameter. The user must specify the guide fiber when running this program.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta, Greg Harris and Yongqiang Zhao.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractFiberTrackingInputSpec
    output_spec = gtractFiberTrackingOutputSpec
    _cmd = " gtractFiberTracking "
    _outputs_filenames = {'outputTract':'outputTract.vtk'}
    _redirect_x = False


class gtractFreeTrackingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input anisotropy image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required: input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds")
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold for seed selection")
    trackingThreshold = traits.Float(argstr="--trackingThreshold %f", desc="Anisotropy threshold for fiber tracking")
    curvatureThreshold = traits.Float(argstr="--curvatureThreshold %f", desc="Curvature threshold (Degrees)")
    minimumLength = traits.Float(argstr="--minimumLength %f", desc="Minimum fiber length. Helpful for filtering invalid tracts.")
    maximumLength = traits.Float(argstr="--maximumLength %f", desc="Maximum fiber length")
    stepSize = traits.Float(argstr="--stepSize %f", desc="Fiber tracking step size")
    useLoopDetection = traits.Bool(argstr="--useLoopDetection ", desc="Flag to make use of loop detection.")
    useTend = traits.Bool(argstr="--useTend ", desc="Flag to make use of Tend F and Tend G parameters.")
    tendF = traits.Float(argstr="--tendF %f", desc="Tend F parameter")
    tendG = traits.Float(argstr="--tendG %f", desc="Tend G parameter")


class gtractFreeTrackingOutputSpec(TraitedSpec):
    outputTract = File(desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractFreeTracking(SEMLikeCommandLine):
    """title: Free Tracking

category: Diffusion.GTRACT

description: This program will use streamlines fiber tracking to identify fiber tracts in a tensor image. A seed region is specify for initializing the algorithm. All fibers are kept and are terminated based on the stopping criteria including anisotropy, curvature and length.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractFreeTrackingInputSpec
    output_spec = gtractFreeTrackingOutputSpec
    _cmd = " gtractFreeTracking "
    _outputs_filenames = {'outputTract':'outputTract'}
    _redirect_x = False


class gtractGraphSearchTrackingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input anisotropy image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required: input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds")
    inputEndingSeedsLabelMapVolume = File(argstr="--inputEndingSeedsLabelMapVolume %s", desc="Required: input ending seeds LabelMap image file name", exists=True)
    endingSeedsLabel = traits.Int(argstr="--endingSeedsLabel %d", desc="Label value for Ending Seeds")
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold for seed selection")
    trackingThreshold = traits.Float(argstr="--trackingThreshold %f", desc="Anisotropy threshold for fiber tracking")
    curvatureThreshold = traits.Float(argstr="--curvatureThreshold %f", desc="Curvature threshold (Degrees)")
    branchingThreshold = traits.Float(argstr="--branchingThreshold %f", desc="Anisotropy Branching threshold")
    maximumBranchPoints = traits.Int(argstr="--maximumBranchPoints %d", desc="Maximum branch points")
    useRandomWalk = traits.Bool(argstr="--useRandomWalk ", desc="Flag to use random walk.")
    randomSeed = traits.Int(argstr="--randomSeed %d", desc="Random number generator seed")
    branchingAngle = traits.Float(argstr="--branchingAngle %f", desc="Branchging angle (Degrees)")
    minimumLength = traits.Float(argstr="--minimumLength %f", desc="Minimum fiber length. Helpful for filtering invalid tracts.")
    maximumLength = traits.Float(argstr="--maximumLength %f", desc="Maximum fiber length")
    stepSize = traits.Float(argstr="--stepSize %f", desc="Fiber tracking step size")
    useLoopDetection = traits.Bool(argstr="--useLoopDetection ", desc="Flag to make use of loop detection.")
    useTend = traits.Bool(argstr="--useTend ", desc="Flag to make use of Tend F and Tend G parameters.")
    tendF = traits.Float(argstr="--tendF %f", desc="Tend F parameter")
    tendG = traits.Float(argstr="--tendG %f", desc="Tend G parameter")


class gtractGraphSearchTrackingOutputSpec(TraitedSpec):
    outputTract = File(desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractGraphSearchTracking(SEMLikeCommandLine):
    """title: Graph Search Tracking

category: Diffusion.GTRACT

description: This program implements the Graph Serach Tracking method proposed by Cheng et al. in NeuroImage Volume 31, Issue 3, 1 July 2006, Pages 1075-1085 for finding the tracks in a tensor image.  This method to generate fibers in a Tensor representation where crossing fibers occur.  This is defined by low anisotropy and high curvature. Both of these values are controlled by the user. In these regions, three directions for tracking are considered. This includes the primary eigenvector, secondary eigenvector, and a vector with random pertubations added pointing towards the ending region.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractGraphSearchTrackingInputSpec
    output_spec = gtractGraphSearchTrackingOutputSpec
    _cmd = " gtractGraphSearchTracking "
    _outputs_filenames = {'outputTract':'outputTract'}
    _redirect_x = False


class gtractGuidedTrackingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input anisotropy image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required: input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds")
    inputEndingSeedsLabelMapVolume = File(argstr="--inputEndingSeedsLabelMapVolume %s", desc="Required: input ending seeds LabelMap image file name", exists=True)
    endingSeedsLabel = traits.Int(argstr="--endingSeedsLabel %d", desc="Label value for Ending Seeds")
    inputTract = File(argstr="--inputTract %s", desc="Required: guide fiber in vtkPolydata file containing one tract line.", exists=True)
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold for seed selection")
    trackingThreshold = traits.Float(argstr="--trackingThreshold %f", desc="Anisotropy threshold for fiber tracking")
    maximumGuideDistance = traits.Float(argstr="--maximumGuideDistance %f", desc="Maximum distance for using the guide fiber direction")
    curvatureThreshold = traits.Float(argstr="--curvatureThreshold %f", desc="Curvature threshold (Degrees)")
    guidedCurvatureThreshold = traits.Float(argstr="--guidedCurvatureThreshold %f", desc="Guided Curvature Threshold (Degrees)")
    minimumLength = traits.Float(argstr="--minimumLength %f", desc="Minimum fiber length. Helpful for filtering invalid tracts.")
    maximumLength = traits.Float(argstr="--maximumLength %f", desc="Maximum fiber length")
    stepSize = traits.Float(argstr="--stepSize %f", desc="Fiber tracking step size")
    useLoopDetection = traits.Bool(argstr="--useLoopDetection ", desc="Flag to make use of loop detection.")
    useTend = traits.Bool(argstr="--useTend ", desc="Flag to make use of Tend F and Tend G parameters.")
    tendF = traits.Float(argstr="--tendF %f", desc="Tend F parameter")
    tendG = traits.Float(argstr="--tendG %f", desc="Tend G parameter")


class gtractGuidedTrackingOutputSpec(TraitedSpec):
    outputTract = File(desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractGuidedTracking(SEMLikeCommandLine):
    """title: Guided Tracking

category: Diffusion.GTRACT

description: This program will use the Guided Tracking method proposed by Cheng et al. in NeuroImage Volume 31, Issue 3, 1 July 2006, Pages 1075-1085 for finding the tracks in a tensor image.  The method will use a guide fiber as apriori information for the fiber tract position and orientation. If the current eigenvector direction is significantly different from the guide fiber direction at that point, then the guide fiber is used instead of the eigenvector direction. The distance for which the guide fiber has an effect is defined by the user.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractGuidedTrackingInputSpec
    output_spec = gtractGuidedTrackingOutputSpec
    _cmd = " gtractGuidedTracking "
    _outputs_filenames = {'outputTract':'outputTract'}
    _redirect_x = False


class gtractImageConformityInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input file containing the signed short image to reorient without resampling.", exists=True)
    inputReferenceVolume = File(argstr="--inputReferenceVolume %s", desc="Required: input file containing the standard image to clone the characteristics of.", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output Nrrd or Nifti file containing the reoriented image in reference image space.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractImageConformityOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output Nrrd or Nifti file containing the reoriented image in reference image space.", exists=True)


class gtractImageConformity(SEMLikeCommandLine):
    """title: Image Conformity

category: Diffusion.GTRACT

description: This program will straighten out the Direction and Origin to match the Reference Image.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractImageConformityInputSpec
    output_spec = gtractImageConformityOutputSpec
    _cmd = " gtractImageConformity "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractInvertBSplineTransformInputSpec(CommandLineInputSpec):
    inputReferenceVolume = File(argstr="--inputReferenceVolume %s", desc="Required: input image file name to exemplify the anatomical space to interpolate over.", exists=True)
    inputTransform = File(argstr="--inputTransform %s", desc="Required: input B-Spline transform file name", exists=True)
    outputTransform = traits.Either(traits.Bool, File(), argstr="--outputTransform %s", desc="Required: output transform file name", hash_files=False)
    landmarkDensity = InputMultiPath(traits.Int, argstr="--landmarkDensity %s", desc="Number of landmark subdivisions in all 3 directions", sep=",")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractInvertBSplineTransformOutputSpec(TraitedSpec):
    outputTransform = File(desc="Required: output transform file name", exists=True)


class gtractInvertBSplineTransform(SEMLikeCommandLine):
    """title: B-Spline Transform Inversion

category: Diffusion.GTRACT

description: This program will invert a B-Spline transform using a thin-plate spline approximation.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractInvertBSplineTransformInputSpec
    output_spec = gtractInvertBSplineTransformOutputSpec
    _cmd = " gtractInvertBSplineTransform "
    _outputs_filenames = {'outputTransform':'outputTransform.h5'}
    _redirect_x = False


class gtractInvertDisplacementFieldInputSpec(CommandLineInputSpec):
    baseImage = File(argstr="--baseImage %s", desc="Required: base image used to define the size of the inverse field", exists=True)
    deformationImage = File(argstr="--deformationImage %s", desc="Required: Displacement field image", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: Output deformation field", hash_files=False)
    subsamplingFactor = traits.Int(argstr="--subsamplingFactor %d", desc="Subsampling factor for the deformation field")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractInvertDisplacementFieldOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: Output deformation field", exists=True)


class gtractInvertDisplacementField(SEMLikeCommandLine):
    """title: Invert Displacement Field

category: Diffusion.GTRACT

description: This program will invert a deformatrion field. The size of the deformation field is defined by an example image provided by the user

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractInvertDisplacementFieldInputSpec
    output_spec = gtractInvertDisplacementFieldOutputSpec
    _cmd = " gtractInvertDisplacementField "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractInvertRigidTransformInputSpec(CommandLineInputSpec):
    inputTransform = File(argstr="--inputTransform %s", desc="Required: input rigid transform file name", exists=True)
    outputTransform = traits.Either(traits.Bool, File(), argstr="--outputTransform %s", desc="Required: output transform file name", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractInvertRigidTransformOutputSpec(TraitedSpec):
    outputTransform = File(desc="Required: output transform file name", exists=True)


class gtractInvertRigidTransform(SEMLikeCommandLine):
    """title: Rigid Transform Inversion

category: Diffusion.GTRACT

description: This program will invert a Rigid transform.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractInvertRigidTransformInputSpec
    output_spec = gtractInvertRigidTransformOutputSpec
    _cmd = " gtractInvertRigidTransform "
    _outputs_filenames = {'outputTransform':'outputTransform.h5'}
    _redirect_x = False


class gtractResampleAnisotropyInputSpec(CommandLineInputSpec):
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input file containing the anisotropy image", exists=True)
    inputAnatomicalVolume = File(argstr="--inputAnatomicalVolume %s", desc="Required: input file containing the anatomical image whose characteristics will be cloned.", exists=True)
    inputTransform = File(argstr="--inputTransform %s", desc="Required: input Rigid OR Bspline transform file name", exists=True)
    transformType = traits.Enum("Rigid", "B-Spline", argstr="--transformType %s", desc="Transform type: Rigid, B-Spline")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the resampled transformed anisotropy image.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractResampleAnisotropyOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the resampled transformed anisotropy image.", exists=True)


class gtractResampleAnisotropy(SEMLikeCommandLine):
    """title: Resample Anisotropy

category: Diffusion.GTRACT

description: This program will resample a floating point image using either the Rigid or B-Spline transform. You may want to save the aligned B0 image after each of the anisotropy map co-registration steps with the anatomical image to check the registration quality with another tool.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractResampleAnisotropyInputSpec
    output_spec = gtractResampleAnisotropyOutputSpec
    _cmd = " gtractResampleAnisotropy "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractResampleB0InputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input file containing the 4D image", exists=True)
    inputAnatomicalVolume = File(argstr="--inputAnatomicalVolume %s", desc="Required: input file containing the anatomical image defining the origin, spacing and size of the resampled image (template)", exists=True)
    inputTransform = File(argstr="--inputTransform %s", desc="Required: input Rigid OR Bspline transform file name", exists=True)
    vectorIndex = traits.Int(argstr="--vectorIndex %d", desc="Index in the diffusion weighted image set for the B0 image")
    transformType = traits.Enum("Rigid", "B-Spline", argstr="--transformType %s", desc="Transform type: Rigid, B-Spline")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the resampled input image.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractResampleB0OutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the resampled input image.", exists=True)


class gtractResampleB0(SEMLikeCommandLine):
    """title: Resample B0

category: Diffusion.GTRACT

description: This program will resample a signed short image using either a Rigid or B-Spline transform. The user must specify a template image that will be used to define the origin, orientation, spacing, and size of the resampled image.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractResampleB0InputSpec
    output_spec = gtractResampleB0OutputSpec
    _cmd = " gtractResampleB0 "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractResampleCodeImageInputSpec(CommandLineInputSpec):
    inputCodeVolume = File(argstr="--inputCodeVolume %s", desc="Required: input file containing the code image", exists=True)
    inputReferenceVolume = File(argstr="--inputReferenceVolume %s", desc="Required: input file containing the standard image to clone the characteristics of.", exists=True)
    inputTransform = File(argstr="--inputTransform %s", desc="Required: input Rigid or Inverse-B-Spline transform file name", exists=True)
    transformType = traits.Enum("Rigid", "Affine", "B-Spline", "Inverse-B-Spline", "None", argstr="--transformType %s", desc="Transform type: Rigid or Inverse-B-Spline")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the resampled code image in acquisition space.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractResampleCodeImageOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the resampled code image in acquisition space.", exists=True)


class gtractResampleCodeImage(SEMLikeCommandLine):
    """title: Resample Code Image

category: Diffusion.GTRACT

description: This program will resample a short integer code image using either the Rigid or Inverse-B-Spline transform.  The reference image is the DTI tensor anisotropy image space, and the input code image is in anatomical space.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractResampleCodeImageInputSpec
    output_spec = gtractResampleCodeImageOutputSpec
    _cmd = " gtractResampleCodeImage "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractResampleDWIInPlaceInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input image is a 4D NRRD image.", exists=True)
    referenceVolume = File(argstr="--referenceVolume %s", desc="If provided, resample to the final space of the referenceVolume 3D data set.", exists=True)
    outputResampledB0 = traits.Either(traits.Bool, File(), argstr="--outputResampledB0 %s", desc="Convenience function for extracting the first index location (assumed to be the B0)", hash_files=False)
    inputTransform = File(argstr="--inputTransform %s", desc="Required: transform file derived from rigid registration of b0 image to reference structural image.", exists=True)
    warpDWITransform = File(argstr="--warpDWITransform %s", desc="Optional: transform file to warp gradient volumes.", exists=True)
    debugLevel = traits.Int(argstr="--debugLevel %d", desc="Display debug messages, and produce debug intermediate results.  0=OFF, 1=Minimal, 10=Maximum debugging.")
    writeOutputMetaData = traits.Either(traits.Bool, File(), argstr="--writeOutputMetaData %s", desc="A file to write the output image diffusion gradient directions in a CSV file", hash_files=False)
    imageOutputSize = InputMultiPath(traits.Int, argstr="--imageOutputSize %s", desc="The voxel lattice for the output image, padding is added if necessary. NOTE: if 0,0,0, then the inputVolume size is used.", sep=",")
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: output image (NRRD file) that has been rigidly transformed into the space of the structural image and padded if image padding was changed from 0,0,0 default.", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractResampleDWIInPlaceOutputSpec(TraitedSpec):
    outputResampledB0 = File(desc="Convenience function for extracting the first index location (assumed to be the B0)", exists=True)
    writeOutputMetaData = File(desc="A file to write the output image diffusion gradient directions in a CSV file", exists=True)
    outputVolume = File(desc="Required: output image (NRRD file) that has been rigidly transformed into the space of the structural image and padded if image padding was changed from 0,0,0 default.", exists=True)


class gtractResampleDWIInPlace(SEMLikeCommandLine):
    """title: Resample DWI In Place

category: Diffusion.GTRACT

description: Resamples DWI image to structural image.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta, Greg Harris, Hans Johnson, and Joy Matsui.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractResampleDWIInPlaceInputSpec
    output_spec = gtractResampleDWIInPlaceOutputSpec
    _cmd = " gtractResampleDWIInPlace "
    _outputs_filenames = {'outputResampledB0':'outputResampledB0.nii','writeOutputMetaData':'writeOutputMetaData','outputVolume':'outputVolume.nii'}
    _redirect_x = False


class gtractResampleFibersInputSpec(CommandLineInputSpec):
    inputForwardDeformationFieldVolume = File(argstr="--inputForwardDeformationFieldVolume %s", desc="Required: input forward deformation field image file name", exists=True)
    inputReverseDeformationFieldVolume = File(argstr="--inputReverseDeformationFieldVolume %s", desc="Required: input reverse deformation field image file name", exists=True)
    inputTract = File(argstr="--inputTract %s", desc="Required: name of input vtkPolydata file containing tract lines.", exists=True)
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractResampleFibersOutputSpec(TraitedSpec):
    outputTract = File(desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractResampleFibers(SEMLikeCommandLine):
    """title: Resample Fibers

category: Diffusion.GTRACT

description: This program will resample a fiber tract with respect to a pair of deformation fields that represent the forward and reverse deformation fields.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractResampleFibersInputSpec
    output_spec = gtractResampleFibersOutputSpec
    _cmd = " gtractResampleFibers "
    _outputs_filenames = {'outputTract':'outputTract.vtk'}
    _redirect_x = False


class gtractStreamlineTrackingInputSpec(CommandLineInputSpec):
    inputTensorVolume = File(argstr="--inputTensorVolume %s", desc="Required: input tensor image file name", exists=True)
    inputAnisotropyVolume = File(argstr="--inputAnisotropyVolume %s", desc="Required: input anisotropy image file name", exists=True)
    inputStartingSeedsLabelMapVolume = File(argstr="--inputStartingSeedsLabelMapVolume %s", desc="Required: input starting seeds LabelMap image file name", exists=True)
    startingSeedsLabel = traits.Int(argstr="--startingSeedsLabel %d", desc="Label value for Starting Seeds")
    inputEndingSeedsLabelMapVolume = File(argstr="--inputEndingSeedsLabelMapVolume %s", desc="Required: input ending seeds LabelMap image file name", exists=True)
    endingSeedsLabel = traits.Int(argstr="--endingSeedsLabel %d", desc="Label value for Ending Seeds")
    outputTract = traits.Either(traits.Bool, File(), argstr="--outputTract %s", desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", hash_files=False)
    writeXMLPolyDataFile = traits.Bool(argstr="--writeXMLPolyDataFile ", desc="Flag to make use of the XML format for vtkPolyData fiber tracts.")
    seedThreshold = traits.Float(argstr="--seedThreshold %f", desc="Anisotropy threshold for seed selection")
    trackingThreshold = traits.Float(argstr="--trackingThreshold %f", desc="Anisotropy threshold for fiber tracking")
    curvatureThreshold = traits.Float(argstr="--curvatureThreshold %f", desc="Curvature threshold (Degrees)")
    minimumLength = traits.Float(argstr="--minimumLength %f", desc="Minimum fiber length. Helpful for filtering invalid tracts.")
    maximumLength = traits.Float(argstr="--maximumLength %f", desc="Maximum fiber length")
    stepSize = traits.Float(argstr="--stepSize %f", desc="Fiber tracking step size")
    useLoopDetection = traits.Bool(argstr="--useLoopDetection ", desc="Flag to make use of loop detection.")
    useTend = traits.Bool(argstr="--useTend ", desc="Flag to make use of Tend F and Tend G parameters.")
    tendF = traits.Float(argstr="--tendF %f", desc="Tend F parameter")
    tendG = traits.Float(argstr="--tendG %f", desc="Tend G parameter")


class gtractStreamlineTrackingOutputSpec(TraitedSpec):
    outputTract = File(desc="Required: name of output vtkPolydata file containing tract lines and the point data collected along them.", exists=True)


class gtractStreamlineTracking(SEMLikeCommandLine):
    """title: Streamline Tracking

category: Diffusion.GTRACT

description: This program create fiber tracts in a tensor image using a basic streamlines algorithm.  The algorithm requires a starting and ending region to be be defined for the fiber tracts. Only those that reach the ending region without terminating are kept. Criteria for termination include length, anisotropy, and curvature. These can be controlled by user. In addition, the TEND method as proposed by Lazar et al Human Brain Mapping 18:306-321(2003) has been instrumented.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractStreamlineTrackingInputSpec
    output_spec = gtractStreamlineTrackingOutputSpec
    _cmd = " gtractStreamlineTracking "
    _outputs_filenames = {'outputTract':'outputTract'}
    _redirect_x = False


class gtractTensorInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Required: input image 4D NRRD image. Must contain data based on at least 6 distinct diffusion directions. The inputVolume is allowed to have multiple b0 and gradient direction images. Averaging of the b0 image is done internally in this step. Prior averaging of the DWIs is not required.", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Required: name of output NRRD file containing the Tensor vector image", hash_files=False)
    medianFilterSize = InputMultiPath(traits.Int, argstr="--medianFilterSize %s", desc="Median filter radius in all 3 directions", sep=",")
    maskProcessingMode = traits.Enum("NOMASK", "ROIAUTO", "ROI", argstr="--maskProcessingMode %s", desc="ROIAUTO:  mask is implicitly defined using a otsu forground and hole filling algorithm. ROI: Uses the masks to define what parts of the image should be used for computing the transform. NOMASK: no mask used")
    maskVolume = File(argstr="--maskVolume %s", desc="Mask Image, if maskProcessingMode is ROI", exists=True)
    backgroundSuppressingThreshold = traits.Int(argstr="--backgroundSuppressingThreshold %d", desc="Image threshold to suppress background. This sets a threshold used on the b0 image to remove background voxels from processing. Typically, values of 100 and 500 work well for Siemens and GE DTI data, respectively. Check your data particularly in the globus pallidus to make sure the brain tissue is not being eliminated with this threshold.")
    resampleIsotropic = traits.Bool(argstr="--resampleIsotropic ", desc="Flag to resample to isotropic voxels. Enabling this feature is recommended if fiber tracking will be performed.")
    size = traits.Float(argstr="--size %f", desc="Isotropic voxel size to resample to")
    b0Index = traits.Int(argstr="--b0Index %d", desc="Index in input vector index to extract")
    applyMeasurementFrame = traits.Bool(argstr="--applyMeasurementFrame ", desc="Flag to apply the measurement frame to the gradient directions")
    ignoreIndex = InputMultiPath(traits.Int, argstr="--ignoreIndex %s", desc="Ignore diffusion gradient index. Used to remove specific gradient directions with artifacts.", sep=",")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractTensorOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: name of output NRRD file containing the Tensor vector image", exists=True)


class gtractTensor(SEMLikeCommandLine):
    """title: Tensor Estimation

category: Diffusion.GTRACT

description: This step will convert a b-value averaged diffusion tensor image to a 3x3 tensor voxel image. This step takes the diffusion tensor image data and generates a tensor representation of the data based on the signal intensity decay, b values applied, and the diffusion difrections. The apparent diffusion coefficient for a given orientation is computed on a pixel-by-pixel basis by fitting the image data (voxel intensities) to the Stejskal-Tanner equation. If at least 6 diffusion directions are used, then the diffusion tensor can be computed. This program uses itk::DiffusionTensor3DReconstructionImageFilter. The user can adjust background threshold, median filter, and isotropic resampling.

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta and Greg Harris.

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractTensorInputSpec
    output_spec = gtractTensorOutputSpec
    _cmd = " gtractTensor "
    _outputs_filenames = {'outputVolume':'outputVolume.nrrd'}
    _redirect_x = False


class gtractTransformToDisplacementFieldInputSpec(CommandLineInputSpec):
    inputTransform = File(argstr="--inputTransform %s", desc="Input Transform File Name", exists=True)
    inputReferenceVolume = File(argstr="--inputReferenceVolume %s", desc="Required: input image file name to exemplify the anatomical space over which to vcl_express the transform as a displacement field.", exists=True)
    outputDeformationFieldVolume = traits.Either(traits.Bool, File(), argstr="--outputDeformationFieldVolume %s", desc="Output deformation field", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class gtractTransformToDisplacementFieldOutputSpec(TraitedSpec):
    outputDeformationFieldVolume = File(desc="Output deformation field", exists=True)


class gtractTransformToDisplacementField(SEMLikeCommandLine):
    """title: Create Displacement Field

category: Diffusion.GTRACT

description: This program will compute forward deformation from the given Transform. The size of the DF is equal to MNI space

version: 5.2.0

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Modules:GTRACT

license: http://mri.radiology.uiowa.edu/copyright/GTRACT-Copyright.txt

contributor: This tool was developed by Vincent Magnotta, Madhura Ingalhalikar, and Greg Harris

acknowledgements: Funding for this version of the GTRACT program was provided by NIH/NINDS R01NS050568-01A2S1

"""

    input_spec = gtractTransformToDisplacementFieldInputSpec
    output_spec = gtractTransformToDisplacementFieldOutputSpec
    _cmd = " gtractTransformToDisplacementField "
    _outputs_filenames = {'outputDeformationFieldVolume':'outputDeformationFieldVolume.nii'}
    _redirect_x = False
