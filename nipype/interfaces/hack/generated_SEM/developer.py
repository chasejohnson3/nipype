# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import (CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec,
                    File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath)
import os


class ExecutionModelTourInputSpec(CommandLineInputSpec):
    integer = traits.Int(argstr="--integer %d", desc="An integer without constraints")
    double = traits.Float(argstr="--double %f", desc="A double with constraints")
    floatVector = InputMultiPath(traits.Float, argstr="--floatVector %s", desc="A vector of floats", sep=",")
    string_vector = InputMultiPath(traits.Str, argstr="--string_vector %s", desc="A vector of strings", sep=",")
    enumeration = traits.Enum("Ron", "Eric", "Bill", "Ross", "Steve", "Will", "árvíztűrő tükörfúrógép", argstr="--enumeration %s", desc="An enumeration of strings")
    boolean1 = traits.Bool(argstr="--boolean1 ", desc="A boolean default true")
    boolean2 = traits.Bool(argstr="--boolean2 ", desc="A boolean default false")
    boolean3 = traits.Bool(argstr="--boolean3 ", desc="A boolean with no default, should be defaulting to false")
    file1 = File(argstr="--file1 %s", desc="An input file", exists=True)
    files = InputMultiPath(File(exists=True), argstr="--files %s...", desc="Multiple input files")
    outputFile1 = traits.Either(traits.Bool, File(), argstr="--outputFile1 %s", desc="An output file", hash_files=False)
    directory1 = Directory(argstr="--directory1 %s", desc="An input directory. If no default is specified, the current directory is used,", exists=True)
    image1 = File(argstr="--image1 %s", desc="An input image", exists=True)
    image2 = traits.Either(traits.Bool, File(), argstr="--image2 %s", desc="An output image", hash_files=False)
    transformInput = File(argstr="--transformInput %s", desc="A generic input transform", exists=True)
    transform1 = File(argstr="--transform1 %s", desc="A linear input transform", exists=True)
    transformInputNonlinear = File(argstr="--transformInputNonlinear %s", desc="A nonlinear input transform", exists=True)
    transformInputBspline = File(argstr="--transformInputBspline %s", desc="A bspline input transform", exists=True)
    transformOutput = traits.Either(traits.Bool, File(), argstr="--transformOutput %s", desc="A generic output transform", hash_files=False)
    transform2 = traits.Either(traits.Bool, File(), argstr="--transform2 %s", desc="A linear output transform", hash_files=False)
    transformOutputNonlinear = traits.Either(traits.Bool, File(), argstr="--transformOutputNonlinear %s", desc="A nonlinear output transform", hash_files=False)
    transformOutputBspline = traits.Either(traits.Bool, File(), argstr="--transformOutputBspline %s", desc="A bspline output transform", hash_files=False)
    seed = InputMultiPath(traits.List(traits.Float(), minlen=3, maxlen=3), argstr="--seed %s...", desc="Lists of points in the CLI correspond to slicer fiducial lists")
    seedsFile = File(argstr="--seedsFile %s", desc="Test file of input fiducials, compared to seeds")
    seedsOutFile = File(argstr="--seedsOutFile %s", desc="Output file to read back in, compare to seeds with flipped settings on first fiducial")
    inputModel = File(argstr="--inputModel %s", desc="Input model", exists=True)
    outputModel = traits.Either(traits.Bool, File(), argstr="--outputModel %s", desc="Output model", hash_files=False)
    modelSceneFile = traits.Either(traits.Bool, InputMultiPath(File(), ), argstr="--modelSceneFile %s...", desc="Generated models, under a model hierarchy node. Models are imported into Slicer under a model hierarchy node. The model hierarchy node must be created before running the model maker, by selecting Create New ModelHierarchy from the Models drop down menu.", hash_files=False)
    arg0 = File(argstr="%s", desc="First index argument is an image", position=-2, exists=True)
    arg1 = traits.Either(traits.Bool, File(), argstr="%s", desc="Second index argument is an image", position=-1, hash_files=False)
    region = InputMultiPath(traits.List(traits.Float(), minlen=3, maxlen=3), argstr="--region %s...", desc="List of regions to process")
    inputFA = traits.List(argstr="--inputFA %s", desc="Array of FA values to process")
    outputFA = traits.List(argstr="--outputFA %s", desc="Array of processed (output) FA values")
    inputDT = File(argstr="--inputDT %s", desc="Array of Table values to process", exists=True)
    outputDT = traits.Either(traits.Bool, File(), argstr="--outputDT %s", desc="Array of processed (output) Table values", hash_files=False)
    anintegerreturn = traits.Int(argstr="--anintegerreturn %d", desc="An example of an integer return type")
    abooleanreturn = traits.Bool(argstr="--abooleanreturn ", desc="An example of a boolean return type")
    afloatreturn = traits.Float(argstr="--afloatreturn %f", desc="An example of a float return type")
    adoublereturn = traits.Float(argstr="--adoublereturn %f", desc="An example of a double return type")
    astringreturn = traits.Str(argstr="--astringreturn %s", desc="An example of a string return type")
    anintegervectorreturn = InputMultiPath(traits.Int, argstr="--anintegervectorreturn %s", desc="An example of an integer vector return type", sep=",")
    astringchoicereturn = traits.Enum("Ron", "Eric", "Bill", "Ross", "Steve", "Will", "árvíztűrő tükörfúrógép", argstr="--astringchoicereturn %s", desc="An enumeration of strings as a return type")


class ExecutionModelTourOutputSpec(TraitedSpec):
    outputFile1 = File(desc="An output file", exists=True)
    image2 = File(desc="An output image", exists=True)
    transformOutput = File(desc="A generic output transform", exists=True)
    transform2 = File(desc="A linear output transform", exists=True)
    transformOutputNonlinear = File(desc="A nonlinear output transform", exists=True)
    transformOutputBspline = File(desc="A bspline output transform", exists=True)
    outputModel = File(desc="Output model", exists=True)
    modelSceneFile = OutputMultiPath(File(exists=True), desc="Generated models, under a model hierarchy node. Models are imported into Slicer under a model hierarchy node. The model hierarchy node must be created before running the model maker, by selecting Create New ModelHierarchy from the Models drop down menu.", exists=True)
    arg1 = File(desc="Second index argument is an image", position=-1, exists=True)
    outputDT = File(desc="Array of processed (output) Table values", exists=True)


class ExecutionModelTour(SEMLikeCommandLine):
    """title: Execution Model Tour

category: Developer Tools

description: Shows one of each type of parameter.

version: 0.1.0.$Revision$(alpha)

documentation-url: http://wiki.slicer.org/slicerWiki/index.php/Documentation/Nightly/Modules/ExecutionModelTour

contributor: Daniel Blezek (GE), Bill Lorensen (GE)

acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.

"""

    input_spec = ExecutionModelTourInputSpec
    output_spec = ExecutionModelTourOutputSpec
    _cmd = " ExecutionModelTour "
    _outputs_filenames = {'outputFile1':'outputFile1.nrrd','image2':'image2.nii','transformOutput':'transformOutput.mat','transform2':'transform2.mat','transformOutputNonlinear':'transformOutputNonlinear.mat','transformOutputBspline':'transformOutputBspline.mat','outputModel':'outputModel.vtk','modelSceneFile':'modelSceneFile.mrml','arg1':'arg1.nii','outputDT':'outputDT.csv'}
    _redirect_x = False
