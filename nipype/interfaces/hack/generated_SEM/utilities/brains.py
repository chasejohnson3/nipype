# -*- coding: utf-8 -*-
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import (CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec,
                    File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath)
import os


class BRAINSAlignMSPInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc=",         The Image to be resampled,       ", exists=True)
    OutputresampleMSP = traits.Either(traits.Bool, File(), argstr="--OutputresampleMSP %s", desc=",         The image to be output.,       ", hash_files=False)
    verbose = traits.Bool(argstr="--verbose ", desc=",         Show more verbose output,       ")
    resultsDir = traits.Either(traits.Bool, Directory(), argstr="--resultsDir %s", desc=",         The directory for the results to be written.,       ", hash_files=False)
    writedebuggingImagesLevel = traits.Int(argstr="--writedebuggingImagesLevel %d", desc=",           This flag controls if debugging images are produced.  By default value of 0 is no images.  Anything greater than zero will be increasing level of debugging images.,       ")
    mspQualityLevel = traits.Int(argstr="--mspQualityLevel %d", desc=",           Flag cotrols how agressive the MSP is estimated.  0=quick estimate (9 seconds), 1=normal estimate (11 seconds), 2=great estimate (22 seconds), 3=best estimate (58 seconds).,       ")
    rescaleIntensities = traits.Bool(argstr="--rescaleIntensities ", desc=",           Flag to turn on rescaling image intensities on input.,       ")
    trimRescaledIntensities = traits.Float(argstr="--trimRescaledIntensities %f", desc=",           Turn on clipping the rescaled image one-tailed on input.  Units of standard deviations above the mean.  Very large values are very permissive.  Non-positive value turns clipping off.  Defaults to removing 0.00001 of a normal tail above the mean.,       ")
    rescaleIntensitiesOutputRange = InputMultiPath(traits.Int, argstr="--rescaleIntensitiesOutputRange %s", desc=",           This pair of integers gives the lower and upper bounds on the signal portion of the output image.  Out-of-field voxels are taken from BackgroundFillValue.,       ", sep=",")
    BackgroundFillValue = traits.Str(argstr="--BackgroundFillValue %s", desc="Fill the background of image with specified short int value. Enter number or use BIGNEG for a large negative number.")
    interpolationMode = traits.Enum("NearestNeighbor", "Linear", "ResampleInPlace", "BSpline", "WindowedSinc", "Hamming", "Cosine", "Welch", "Lanczos", "Blackman", argstr="--interpolationMode %s", desc="Type of interpolation to be used when applying transform to moving volume.  Options are Linear, ResampleInPlace, NearestNeighbor, BSpline, or WindowedSinc")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSAlignMSPOutputSpec(TraitedSpec):
    OutputresampleMSP = File(desc=",         The image to be output.,       ", exists=True)
    resultsDir = Directory(desc=",         The directory for the results to be written.,       ", exists=True)


class BRAINSAlignMSP(SEMLikeCommandLine):
    """title: Align Mid Saggital Brain (BRAINS)

category: Utilities.BRAINS

description: Resample an image into ACPC alignement ACPCDetect

"""

    input_spec = BRAINSAlignMSPInputSpec
    output_spec = BRAINSAlignMSPOutputSpec
    _cmd = " BRAINSAlignMSP "
    _outputs_filenames = {'OutputresampleMSP':'OutputresampleMSP.nii','resultsDir':'resultsDir'}
    _redirect_x = False


class BRAINSClipInferiorInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Input image to make a clipped short int copy from.", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Output image, a short int copy of the upper portion of the input image, filled with BackgroundFillValue.", hash_files=False)
    acLowerBound = traits.Float(argstr="--acLowerBound %f", desc=",                 When the input image to the output image, replace the image with the BackgroundFillValue everywhere below the plane This Far in physical units (millimeters) below (inferior to) the AC point (assumed to be the voxel field middle.)  The oversize default was chosen to have no effect.  Based on visualizing a thousand masks in the IPIG study, we recommend a limit no smaller than 80.0 mm.,             ")
    BackgroundFillValue = traits.Str(argstr="--BackgroundFillValue %s", desc="Fill the background of image with specified short int value. Enter number or use BIGNEG for a large negative number.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSClipInferiorOutputSpec(TraitedSpec):
    outputVolume = File(desc="Output image, a short int copy of the upper portion of the input image, filled with BackgroundFillValue.", exists=True)


class BRAINSClipInferior(SEMLikeCommandLine):
    """title: Clip Inferior of Center of Brain (BRAINS)

category: Utilities.BRAINS

description: This program will read the inputVolume as a short int image, write the BackgroundFillValue everywhere inferior to the lower bound, and write the resulting clipped short int image in the outputVolume.

version: 5.2.0

"""

    input_spec = BRAINSClipInferiorInputSpec
    output_spec = BRAINSClipInferiorOutputSpec
    _cmd = " BRAINSClipInferior "
    _outputs_filenames = {'outputVolume':'outputVolume.nii'}
    _redirect_x = False


class BRAINSConstellationDetectorGUIInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="The filename of the input NIfTI volume to view/manipulate", exists=True)
    inputLandmarks = File(argstr="--inputLandmarks %s", desc=",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (in a .fcsv format) with the landmarks in the original image space in it to be read in.,             ", exists=True)
    outputLandmarks = File(argstr="--outputLandmarks %s", desc=",               The filename for the new subject-specific landmark definition file in the same format produced by Slicer3 (in a .fcsv format) with the landmarks in the original image space in it to be written.,             ", exists=True)


class BRAINSConstellationDetectorGUIOutputSpec(TraitedSpec):
    pass


class BRAINSConstellationDetectorGUI(SEMLikeCommandLine):
    """title: ConstellationDetectorGUI (BRAINS)

category: Utilities.BRAINS

description: This program provides the user with a GUI tool to view/manipulate landmarks for an input volume.

version: 5.2.0

documentation-url: http://www.nitrc.org/projects/brainscdetector/

"""

    input_spec = BRAINSConstellationDetectorGUIInputSpec
    output_spec = BRAINSConstellationDetectorGUIOutputSpec
    _cmd = " BRAINSConstellationDetectorGUI "
    _outputs_filenames = {}
    _redirect_x = False


class BRAINSConstellationLandmarksTransformInputSpec(CommandLineInputSpec):
    inputLandmarksFile = File(argstr="--inputLandmarksFile %s", desc="Input landmarks file (.fcsv)", exists=True)
    inputTransformFile = File(argstr="--inputTransformFile %s", desc="input composite transform file (.h5,.hdf5)", exists=True)
    outputLandmarksFile = traits.Either(traits.Bool, File(), argstr="--outputLandmarksFile %s", desc="Output landmarks file (.fcsv)", hash_files=False)


class BRAINSConstellationLandmarksTransformOutputSpec(TraitedSpec):
    outputLandmarksFile = File(desc="Output landmarks file (.fcsv)", exists=True)


class BRAINSConstellationLandmarksTransform(SEMLikeCommandLine):
    """title: Landmarks Transformation

category: Utilities.BRAINS

description: This program converts the original landmark file to the target landmark file using the input transform.

version: 5.2.0

contributor: Ali Ghayoor

"""

    input_spec = BRAINSConstellationLandmarksTransformInputSpec
    output_spec = BRAINSConstellationLandmarksTransformOutputSpec
    _cmd = " BRAINSConstellationLandmarksTransform "
    _outputs_filenames = {'outputLandmarksFile':'outputLandmarksFile.fcsv'}
    _redirect_x = False


class BRAINSConstellationModelerInputSpec(CommandLineInputSpec):
    verbose = traits.Bool(argstr="--verbose ", desc=",               Show more verbose output,             ")
    inputTrainingList = File(argstr="--inputTrainingList %s", desc=",               Setup file, giving all parameters for training up a template model for each landmark.,             ", exists=True)
    outputModel = traits.Either(traits.Bool, File(), argstr="--outputModel %s", desc=",               The full filename of the output model file.,             ", hash_files=False)
    saveOptimizedLandmarks = traits.Bool(argstr="--saveOptimizedLandmarks ", desc=",               Flag to make a new subject-specific landmark definition file in the same format produced by Slicer3 with the optimized landmark (the detected RP, AC, and PC) in it.  Useful to tighten the variances in the ConstellationModeler.,             ")
    optimizedLandmarksFilenameExtender = traits.Str(argstr="--optimizedLandmarksFilenameExtender %s", desc=",                If the trainingList is (indexFullPathName) and contains landmark data filenames [path]/[filename].fcsv ,  make the optimized landmarks filenames out of [path]/[filename](thisExtender) and the optimized version of the input trainingList out of (indexFullPathName)(thisExtender) , when you rewrite all the landmarks according to the saveOptimizedLandmarks flag.,             ")
    resultsDir = traits.Either(traits.Bool, Directory(), argstr="--resultsDir %s", desc=",               The directory for the results to be written.,             ", hash_files=False)
    mspQualityLevel = traits.Int(argstr="--mspQualityLevel %d", desc=",                 Flag cotrols how agressive the MSP is estimated.  0=quick estimate (9 seconds), 1=normal estimate (11 seconds), 2=great estimate (22 seconds), 3=best estimate (58 seconds).,             ")
    rescaleIntensities = traits.Bool(argstr="--rescaleIntensities ", desc=",                 Flag to turn on rescaling image intensities on input.,             ")
    trimRescaledIntensities = traits.Float(argstr="--trimRescaledIntensities %f", desc=",                 Turn on clipping the rescaled image one-tailed on input.  Units of standard deviations above the mean.  Very large values are very permissive.  Non-positive value turns clipping off.  Defaults to removing 0.00001 of a normal tail above the mean.,             ")
    rescaleIntensitiesOutputRange = InputMultiPath(traits.Int, argstr="--rescaleIntensitiesOutputRange %s", desc=",                 This pair of integers gives the lower and upper bounds on the signal portion of the output image.  Out-of-field voxels are taken from BackgroundFillValue.,             ", sep=",")
    BackgroundFillValue = traits.Str(argstr="--BackgroundFillValue %s", desc="Fill the background of image with specified short int value. Enter number or use BIGNEG for a large negative number.")
    writedebuggingImagesLevel = traits.Int(argstr="--writedebuggingImagesLevel %d", desc=",                 This flag controls if debugging images are produced.  By default value of 0 is no images.  Anything greater than zero will be increasing level of debugging images.,             ")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSConstellationModelerOutputSpec(TraitedSpec):
    outputModel = File(desc=",               The full filename of the output model file.,             ", exists=True)
    resultsDir = Directory(desc=",               The directory for the results to be written.,             ", exists=True)


class BRAINSConstellationModeler(SEMLikeCommandLine):
    """title: Generate Landmarks Model (BRAINS)

category: Utilities.BRAINS

description: Train up a model for BRAINSConstellationDetector

"""

    input_spec = BRAINSConstellationModelerInputSpec
    output_spec = BRAINSConstellationModelerOutputSpec
    _cmd = " BRAINSConstellationModeler "
    _outputs_filenames = {'outputModel':'outputModel.mdl','resultsDir':'resultsDir'}
    _redirect_x = False


class BRAINSEyeDetectorInputSpec(CommandLineInputSpec):
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")
    inputVolume = File(argstr="--inputVolume %s", desc="The input volume", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="The output volume", hash_files=False)
    debugDir = traits.Str(argstr="--debugDir %s", desc="A place for debug information")


class BRAINSEyeDetectorOutputSpec(TraitedSpec):
    outputVolume = File(desc="The output volume", exists=True)


class BRAINSEyeDetector(SEMLikeCommandLine):
    """title: Eye Detector (BRAINS)

category: Utilities.BRAINS

version: 5.2.0

documentation-url: http://www.nitrc.org/projects/brainscdetector/

"""

    input_spec = BRAINSEyeDetectorInputSpec
    output_spec = BRAINSEyeDetectorOutputSpec
    _cmd = " BRAINSEyeDetector "
    _outputs_filenames = {'outputVolume':'outputVolume.nii'}
    _redirect_x = False


class BRAINSInitializedControlPointsInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Input Volume", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Output Volume", hash_files=False)
    splineGridSize = InputMultiPath(traits.Int, argstr="--splineGridSize %s", desc="The number of subdivisions of the BSpline Grid to be centered on the image space.  Each dimension must have at least 3 subdivisions for the BSpline to be correctly computed. ", sep=",")
    permuteOrder = InputMultiPath(traits.Int, argstr="--permuteOrder %s", desc="The permutation order for the images.  The default is 0,1,2 (i.e. no permutation)", sep=",")
    outputLandmarksFile = traits.Str(argstr="--outputLandmarksFile %s", desc="Output filename")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSInitializedControlPointsOutputSpec(TraitedSpec):
    outputVolume = File(desc="Output Volume", exists=True)


class BRAINSInitializedControlPoints(SEMLikeCommandLine):
    """title: Initialized Control Points (BRAINS)

category: Utilities.BRAINS

description: Outputs bspline control points as landmarks

version: 5.2.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Mark Scully

acknowledgements: This work is part of the National Alliance for Medical Image Computing (NAMIC), funded by the National Institutes of Health through the NIH Roadmap for Medical Research, Grant U54 EB005149.  Additional support for Mark Scully and Hans Johnson at the University of Iowa.

"""

    input_spec = BRAINSInitializedControlPointsInputSpec
    output_spec = BRAINSInitializedControlPointsOutputSpec
    _cmd = " BRAINSInitializedControlPoints "
    _outputs_filenames = {'outputVolume':'outputVolume.nii'}
    _redirect_x = False


class BRAINSLandmarkInitializerInputSpec(CommandLineInputSpec):
    inputFixedLandmarkFilename = File(argstr="--inputFixedLandmarkFilename %s", desc="input landmarks from fixed image *.fcsv", exists=True)
    inputMovingLandmarkFilename = File(argstr="--inputMovingLandmarkFilename %s", desc="input landmarks from moving image *.fcsv", exists=True)
    inputWeightFilename = File(argstr="--inputWeightFilename %s", desc="Input weight file name for landmarks. Higher weighted landmark will be considered more heavily. Weights are propotional, that is the magnitude of weights will be normalized by its minimum and maximum value. ", exists=True)
    outputTransformFilename = traits.Either(traits.Bool, File(), argstr="--outputTransformFilename %s", desc="output transform file name (ex: ./moving2fixed.h5) that is appropriate for applying to the moving image to align with the fixed image.  The _Inverse file is also written that is approporate for placing the moving Landmarks with the fixed image. ", hash_files=False)
    outputTransformType = traits.Enum("AffineTransform", "VersorRigid3DTransform", "BSplineTransform", argstr="--outputTransformType %s", desc="The target transformation type. ")
    inputReferenceImageFilename = File(argstr="--inputReferenceImageFilename %s", desc="Set the reference image to define the parametric domain for the BSpline transform. ", exists=True)
    bsplineNumberOfControlPoints = traits.Int(argstr="--bsplineNumberOfControlPoints %d", desc="Set the number of control points to define the parametric domain for the BSpline transform. ")


class BRAINSLandmarkInitializerOutputSpec(TraitedSpec):
    outputTransformFilename = File(desc="output transform file name (ex: ./moving2fixed.h5) that is appropriate for applying to the moving image to align with the fixed image.  The _Inverse file is also written that is approporate for placing the moving Landmarks with the fixed image. ", exists=True)


class BRAINSLandmarkInitializer(SEMLikeCommandLine):
    """title: BRAINSLandmarkInitializer

category: Utilities.BRAINS

description: Create transformation file (*.h5) from a pair of landmarks (*fcsv) files.

version: 5.2.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Eunyoung Regina Kim, Ali Ghayoor, and Hans J. Johnson

acknowledgements: SINAPSE Lab

"""

    input_spec = BRAINSLandmarkInitializerInputSpec
    output_spec = BRAINSLandmarkInitializerOutputSpec
    _cmd = " BRAINSLandmarkInitializer "
    _outputs_filenames = {'outputTransformFilename':'outputTransformFilename.h5'}
    _redirect_x = False


class BRAINSLinearModelerEPCAInputSpec(CommandLineInputSpec):
    inputTrainingList = File(argstr="--inputTrainingList %s", desc="Input Training Landmark List Filename,             ", exists=True)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSLinearModelerEPCAOutputSpec(TraitedSpec):
    pass


class BRAINSLinearModelerEPCA(SEMLikeCommandLine):
    """title: Landmark Linear Modeler (BRAINS)

category: Utilities.BRAINS

description: Training linear model using EPCA. Implementation based on my MS thesis, "A METHOD FOR AUTOMATED LANDMARK CONSTELLATION DETECTION USING EVOLUTIONARY PRINCIPAL COMPONENTS AND STATISTICAL SHAPE MODELS"

version: 5.2.0

documentation-url: http://www.nitrc.org/projects/brainscdetector/

"""

    input_spec = BRAINSLinearModelerEPCAInputSpec
    output_spec = BRAINSLinearModelerEPCAOutputSpec
    _cmd = " BRAINSLinearModelerEPCA "
    _outputs_filenames = {}
    _redirect_x = False


class BRAINSLmkTransformInputSpec(CommandLineInputSpec):
    inputMovingLandmarks = File(argstr="--inputMovingLandmarks %s", desc="Input Moving Landmark list file in fcsv,             ", exists=True)
    inputFixedLandmarks = File(argstr="--inputFixedLandmarks %s", desc="Input Fixed Landmark list file in fcsv,             ", exists=True)
    outputAffineTransform = traits.Either(traits.Bool, File(), argstr="--outputAffineTransform %s", desc="The filename for the estimated affine transform,             ", hash_files=False)
    inputMovingVolume = File(argstr="--inputMovingVolume %s", desc="The filename of input moving volume", exists=True)
    inputReferenceVolume = File(argstr="--inputReferenceVolume %s", desc="The filename of the reference volume", exists=True)
    outputResampledVolume = traits.Either(traits.Bool, File(), argstr="--outputResampledVolume %s", desc="The filename of the output resampled volume", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSLmkTransformOutputSpec(TraitedSpec):
    outputAffineTransform = File(desc="The filename for the estimated affine transform,             ", exists=True)
    outputResampledVolume = File(desc="The filename of the output resampled volume", exists=True)


class BRAINSLmkTransform(SEMLikeCommandLine):
    """title: Landmark Transform (BRAINS)

category: Utilities.BRAINS

description: This utility program estimates the affine transform to align the fixed landmarks to the moving landmarks, and then generate the resampled moving image to the same physical space as that of the reference image.

version: 5.2.0

documentation-url: http://www.nitrc.org/projects/brainscdetector/

"""

    input_spec = BRAINSLmkTransformInputSpec
    output_spec = BRAINSLmkTransformOutputSpec
    _cmd = " BRAINSLmkTransform "
    _outputs_filenames = {'outputAffineTransform':'outputAffineTransform.h5','outputResampledVolume':'outputResampledVolume.nii'}
    _redirect_x = False


class BRAINSMultiModeSegmentInputSpec(CommandLineInputSpec):
    inputVolumes = InputMultiPath(File(exists=True), argstr="--inputVolumes %s...", desc="The input image volumes for finding the largest region filled mask.")
    inputMaskVolume = File(argstr="--inputMaskVolume %s", desc="The ROI for region to compute histogram levels.", exists=True)
    outputROIMaskVolume = traits.Either(traits.Bool, File(), argstr="--outputROIMaskVolume %s", desc="The ROI automatically found from the input image.", hash_files=False)
    outputClippedVolumeROI = traits.Either(traits.Bool, File(), argstr="--outputClippedVolumeROI %s", desc="The inputVolume clipped to the region of the brain mask.", hash_files=False)
    lowerThreshold = InputMultiPath(traits.Float, argstr="--lowerThreshold %s", desc="Lower thresholds on the valid histogram regions for each modality", sep=",")
    upperThreshold = InputMultiPath(traits.Float, argstr="--upperThreshold %s", desc="Upper thresholds on the valid histogram regions for each modality", sep=",")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSMultiModeSegmentOutputSpec(TraitedSpec):
    outputROIMaskVolume = File(desc="The ROI automatically found from the input image.", exists=True)
    outputClippedVolumeROI = File(desc="The inputVolume clipped to the region of the brain mask.", exists=True)


class BRAINSMultiModeSegment(SEMLikeCommandLine):
    """title: Segment based on rectangular region of joint histogram (BRAINS)

category: Utilities.BRAINS

description: This tool creates binary regions based on segmenting multiple image modalitities at once.

version: 5.2.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Hans J. Johnson, hans-johnson -at- uiowa.edu, http://www.psychiatry.uiowa.edu

acknowledgements: Hans Johnson(1,3,4); Gregory Harris(1), Vincent Magnotta(1,2,3);   (1=University of Iowa Department of Psychiatry, 2=University of Iowa Department of Radiology, 3=University of Iowa Department of Biomedical Engineering, 4=University of Iowa Department of Electrical and Computer Engineering)

"""

    input_spec = BRAINSMultiModeSegmentInputSpec
    output_spec = BRAINSMultiModeSegmentOutputSpec
    _cmd = " BRAINSMultiModeSegment "
    _outputs_filenames = {'outputROIMaskVolume':'outputROIMaskVolume.nii','outputClippedVolumeROI':'outputClippedVolumeROI.nii'}
    _redirect_x = False


class BRAINSMushInputSpec(CommandLineInputSpec):
    inputFirstVolume = File(argstr="--inputFirstVolume %s", desc="Input image (1) for mixture optimization", exists=True)
    inputSecondVolume = File(argstr="--inputSecondVolume %s", desc="Input image (2) for mixture optimization", exists=True)
    inputMaskVolume = File(argstr="--inputMaskVolume %s", desc="Input label image for mixture optimization", exists=True)
    outputWeightsFile = traits.Either(traits.Bool, File(), argstr="--outputWeightsFile %s", desc="Output Weights File", hash_files=False)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="The MUSH image produced from the T1 and T2 weighted images", hash_files=False)
    outputMask = traits.Either(traits.Bool, File(), argstr="--outputMask %s", desc="The brain volume mask generated from the MUSH image", hash_files=False)
    seed = InputMultiPath(traits.Int, argstr="--seed %s", desc="Seed Point for Brain Region Filling", sep=",")
    desiredMean = traits.Float(argstr="--desiredMean %f", desc="Desired mean within the mask for weighted sum of both images.")
    desiredVariance = traits.Float(argstr="--desiredVariance %f", desc="Desired variance within the mask for weighted sum of both images.")
    lowerThresholdFactorPre = traits.Float(argstr="--lowerThresholdFactorPre %f", desc="Lower threshold factor for finding an initial brain mask")
    upperThresholdFactorPre = traits.Float(argstr="--upperThresholdFactorPre %f", desc="Upper threshold factor for finding an initial brain mask")
    lowerThresholdFactor = traits.Float(argstr="--lowerThresholdFactor %f", desc="Lower threshold factor for defining the brain mask")
    upperThresholdFactor = traits.Float(argstr="--upperThresholdFactor %f", desc="Upper threshold factor for defining the brain mask")
    boundingBoxSize = InputMultiPath(traits.Int, argstr="--boundingBoxSize %s", desc="Size of the cubic bounding box mask used when no brain mask is present", sep=",")
    boundingBoxStart = InputMultiPath(traits.Int, argstr="--boundingBoxStart %s", desc="XYZ point-coordinate for the start of the cubic bounding box mask used when no brain mask is present", sep=",")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSMushOutputSpec(TraitedSpec):
    outputWeightsFile = File(desc="Output Weights File", exists=True)
    outputVolume = File(desc="The MUSH image produced from the T1 and T2 weighted images", exists=True)
    outputMask = File(desc="The brain volume mask generated from the MUSH image", exists=True)


class BRAINSMush(SEMLikeCommandLine):
    """title: Brain Extraction from T1/T2 image (BRAINS)

category: Utilities.BRAINS

description: This program: 1) generates a weighted mixture image optimizing the mean and variance and 2) produces a mask of the brain volume

version: 5.2.0

documentation-url: http:://mri.radiology.uiowa.edu

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: This tool is a modification by Steven Dunn of a program developed by Greg Harris and Ron Pierson.

acknowledgements: This work was developed by the University of Iowa Departments of Radiology and Psychiatry. This software was supported in part of NIH/NINDS award NS050568.

"""

    input_spec = BRAINSMushInputSpec
    output_spec = BRAINSMushOutputSpec
    _cmd = " BRAINSMush "
    _outputs_filenames = {'outputWeightsFile':'outputWeightsFile.txt','outputVolume':'outputVolume.nii.gz','outputMask':'outputMask.nii.gz'}
    _redirect_x = False


class BRAINSSnapShotWriterInputSpec(CommandLineInputSpec):
    inputVolumes = InputMultiPath(File(exists=True), argstr="--inputVolumes %s...", desc="Input image volume list to be extracted as 2D image. Multiple input is possible. At least one input is required.")
    inputBinaryVolumes = InputMultiPath(File(exists=True), argstr="--inputBinaryVolumes %s...", desc="Input mask (binary) volume list to be extracted as 2D image. Multiple input is possible.")
    inputSliceToExtractInPhysicalPoint = InputMultiPath(traits.Float, argstr="--inputSliceToExtractInPhysicalPoint %s", desc="2D slice number of input images. For autoWorkUp output, which AC-PC aligned, 0,0,0 will be the center.", sep=",")
    inputSliceToExtractInIndex = InputMultiPath(traits.Int, argstr="--inputSliceToExtractInIndex %s", desc="2D slice number of input images. For size of 256*256*256 image, 128 is usually used.", sep=",")
    inputSliceToExtractInPercent = InputMultiPath(traits.Int, argstr="--inputSliceToExtractInPercent %s", desc="2D slice number of input images. Percentage input from 0%-100%. (ex. --inputSliceToExtractInPercent 50,50,50", sep=",")
    inputPlaneDirection = InputMultiPath(traits.Int, argstr="--inputPlaneDirection %s", desc="Plane to display. In general, 0=saggital, 1=coronal, and 2=axial plane.", sep=",")
    outputFilename = traits.Either(traits.Bool, File(), argstr="--outputFilename %s", desc="2D file name of input images. Required.", hash_files=False)


class BRAINSSnapShotWriterOutputSpec(TraitedSpec):
    outputFilename = File(desc="2D file name of input images. Required.", exists=True)


class BRAINSSnapShotWriter(SEMLikeCommandLine):
    """title: BRAINSSnapShotWriter

category: Utilities.BRAINS

description: Create 2D snapshot of input images. Mask images are color-coded

version: 5.2.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Eunyoung Regina Kim

"""

    input_spec = BRAINSSnapShotWriterInputSpec
    output_spec = BRAINSSnapShotWriterOutputSpec
    _cmd = " BRAINSSnapShotWriter "
    _outputs_filenames = {'outputFilename':'outputFilename'}
    _redirect_x = False


class BRAINSTransformConvertInputSpec(CommandLineInputSpec):
    inputTransform = File(argstr="--inputTransform %s", exists=True)
    referenceVolume = File(argstr="--referenceVolume %s", exists=True)
    outputTransformType = traits.Enum("Affine", "VersorRigid", "ScaleVersor", "ScaleSkewVersor", "DisplacementField", "Same", argstr="--outputTransformType %s", desc="The target transformation type. Must be conversion-compatible with the input transform type")
    outputPrecisionType = traits.Enum("double", "float", argstr="--outputPrecisionType %s", desc="Precision type of the output transform. It can be either single precision or double precision")
    displacementVolume = traits.Either(traits.Bool, File(), argstr="--displacementVolume %s", hash_files=False)
    outputTransform = traits.Either(traits.Bool, File(), argstr="--outputTransform %s", hash_files=False)


class BRAINSTransformConvertOutputSpec(TraitedSpec):
    displacementVolume = File(exists=True)
    outputTransform = File(exists=True)


class BRAINSTransformConvert(SEMLikeCommandLine):
    """title: BRAINS Transform Convert

category: Utilities.BRAINS

description: Convert ITK transforms to higher order transforms

version: 5.2.0

documentation-url: A utility to convert between transform file formats.

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Hans J. Johnson,Kent Williams, Ali Ghayoor

"""

    input_spec = BRAINSTransformConvertInputSpec
    output_spec = BRAINSTransformConvertOutputSpec
    _cmd = " BRAINSTransformConvert "
    _outputs_filenames = {'displacementVolume':'displacementVolume.nii','outputTransform':'outputTransform.mat'}
    _redirect_x = False


class BRAINSTrimForegroundInDirectionInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="Input image to trim off the neck (and also air-filling noise.)", exists=True)
    outputVolume = traits.Either(traits.Bool, File(), argstr="--outputVolume %s", desc="Output image with neck and air-filling noise trimmed isotropic image with AC at center of image.", hash_files=False)
    directionCode = traits.Int(argstr="--directionCode %d", desc=",                 This flag chooses which dimension to compare.  The sign lets you flip direction.,             ")
    otsuPercentileThreshold = traits.Float(argstr="--otsuPercentileThreshold %f", desc=",                 This is a parameter to FindLargestForegroundFilledMask, which is employed to trim off air-filling noise.,             ")
    closingSize = traits.Int(argstr="--closingSize %d", desc=",                 This is a parameter to FindLargestForegroundFilledMask,             ")
    headSizeLimit = traits.Float(argstr="--headSizeLimit %f", desc=",                 Use this to vary from the command line our search for how much upper tissue is head for the center-of-mass calculation.  Units are CCs, not cubic millimeters.,             ")
    BackgroundFillValue = traits.Str(argstr="--BackgroundFillValue %s", desc="Fill the background of image with specified short int value. Enter number or use BIGNEG for a large negative number.")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class BRAINSTrimForegroundInDirectionOutputSpec(TraitedSpec):
    outputVolume = File(desc="Output image with neck and air-filling noise trimmed isotropic image with AC at center of image.", exists=True)


class BRAINSTrimForegroundInDirection(SEMLikeCommandLine):
    """title: Trim Foreground In Direction (BRAINS)

category: Utilities.BRAINS

description: This program will trim off the neck and also air-filling noise from the inputImage.

version: 5.2.0

documentation-url: http://www.nitrc.org/projects/art/

"""

    input_spec = BRAINSTrimForegroundInDirectionInputSpec
    output_spec = BRAINSTrimForegroundInDirectionOutputSpec
    _cmd = " BRAINSTrimForegroundInDirection "
    _outputs_filenames = {'outputVolume':'outputVolume.nii'}
    _redirect_x = False


class FindCenterOfBrainInputSpec(CommandLineInputSpec):
    inputVolume = File(argstr="--inputVolume %s", desc="The image in which to find the center.", exists=True)
    imageMask = File(argstr="--imageMask %s", exists=True)
    clippedImageMask = traits.Either(traits.Bool, File(), argstr="--clippedImageMask %s", hash_files=False)
    maximize = traits.Bool(argstr="--maximize ")
    axis = traits.Int(argstr="--axis %d")
    otsuPercentileThreshold = traits.Float(argstr="--otsuPercentileThreshold %f")
    closingSize = traits.Int(argstr="--closingSize %d")
    headSizeLimit = traits.Float(argstr="--headSizeLimit %f")
    headSizeEstimate = traits.Float(argstr="--headSizeEstimate %f")
    backgroundValue = traits.Int(argstr="--backgroundValue %d")
    generateDebugImages = traits.Bool(argstr="--generateDebugImages ")
    debugDistanceImage = traits.Either(traits.Bool, File(), argstr="--debugDistanceImage %s", hash_files=False)
    debugGridImage = traits.Either(traits.Bool, File(), argstr="--debugGridImage %s", hash_files=False)
    debugAfterGridComputationsForegroundImage = traits.Either(traits.Bool, File(), argstr="--debugAfterGridComputationsForegroundImage %s", hash_files=False)
    debugClippedImageMask = traits.Either(traits.Bool, File(), argstr="--debugClippedImageMask %s", hash_files=False)
    debugTrimmedImage = traits.Either(traits.Bool, File(), argstr="--debugTrimmedImage %s", hash_files=False)


class FindCenterOfBrainOutputSpec(TraitedSpec):
    clippedImageMask = File(exists=True)
    debugDistanceImage = File(exists=True)
    debugGridImage = File(exists=True)
    debugAfterGridComputationsForegroundImage = File(exists=True)
    debugClippedImageMask = File(exists=True)
    debugTrimmedImage = File(exists=True)


class FindCenterOfBrain(SEMLikeCommandLine):
    """title: Center Of Brain (BRAINS)

category: Utilities.BRAINS

description: Finds the center point of a brain

version: 5.2.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Hans J. Johnson, hans-johnson -at- uiowa.edu, http://wwww.psychiatry.uiowa.edu

acknowledgements: Hans Johnson(1,3,4); Kent Williams(1);  (1=University of Iowa Department of Psychiatry, 3=University of Iowa Department of Biomedical Engineering, 4=University of Iowa Department of Electrical and Computer Engineering

"""

    input_spec = FindCenterOfBrainInputSpec
    output_spec = FindCenterOfBrainOutputSpec
    _cmd = " FindCenterOfBrain "
    _outputs_filenames = {'clippedImageMask':'clippedImageMask.nii','debugDistanceImage':'debugDistanceImage.nii','debugGridImage':'debugGridImage.nii','debugAfterGridComputationsForegroundImage':'debugAfterGridComputationsForegroundImage.nii','debugClippedImageMask':'debugClippedImageMask.nii','debugTrimmedImage':'debugTrimmedImage.nii'}
    _redirect_x = False


class GenerateLabelMapFromProbabilityMapInputSpec(CommandLineInputSpec):
    inputVolumes = InputMultiPath(File(exists=True), argstr="--inputVolumes %s...", desc="The Input probaiblity images to be computed for lable maps")
    outputLabelVolume = traits.Either(traits.Bool, File(), argstr="--outputLabelVolume %s", desc="The Input binary image for region of interest", hash_files=False)
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class GenerateLabelMapFromProbabilityMapOutputSpec(TraitedSpec):
    outputLabelVolume = File(desc="The Input binary image for region of interest", exists=True)


class GenerateLabelMapFromProbabilityMap(SEMLikeCommandLine):
    """title: Label Map from Probability Images

category: Utilities.BRAINS

description: Given a list of probability maps for labels, create a discrete label map where only the highest probability region is used for the labeling.

version: 5.2.0

contributor: University of Iowa Department of Psychiatry, http:://www.psychiatry.uiowa.edu

"""

    input_spec = GenerateLabelMapFromProbabilityMapInputSpec
    output_spec = GenerateLabelMapFromProbabilityMapOutputSpec
    _cmd = " GenerateLabelMapFromProbabilityMap "
    _outputs_filenames = {'outputLabelVolume':'outputLabelVolume.nii.gz'}
    _redirect_x = False


class fcsv_to_hdf5InputSpec(CommandLineInputSpec):
    versionID = traits.Str(argstr="--versionID %s", desc=",         Current version ID. It should be match with the version of BCD that will be using the output model file,       ")
    landmarksInformationFile = traits.Either(traits.Bool, File(), argstr="--landmarksInformationFile %s", desc=",         name of HDF5 file to write matrices into,       ", hash_files=False)
    landmarkTypesList = File(argstr="--landmarkTypesList %s", desc=",         file containing list of landmark types,       ", exists=True)
    modelFile = traits.Either(traits.Bool, File(), argstr="--modelFile %s", desc=",         name of HDF5 file containing BRAINSConstellationDetector Model file (LLSMatrices, LLSMeans and LLSSearchRadii),       ", hash_files=False)
    landmarkGlobPattern = traits.Str(argstr="--landmarkGlobPattern %s", desc="Glob pattern to select fcsv files")
    numberOfThreads = traits.Int(argstr="--numberOfThreads %d", desc="Explicitly specify the maximum number of threads to use.")


class fcsv_to_hdf5OutputSpec(TraitedSpec):
    landmarksInformationFile = File(desc=",         name of HDF5 file to write matrices into,       ", exists=True)
    modelFile = File(desc=",         name of HDF5 file containing BRAINSConstellationDetector Model file (LLSMatrices, LLSMeans and LLSSearchRadii),       ", exists=True)


class fcsv_to_hdf5(SEMLikeCommandLine):
    """title: fcsv_to_hdf5 (BRAINS)

category: Utilities.BRAINS

description: Convert a collection of fcsv files to a HDF5 format file

"""

    input_spec = fcsv_to_hdf5InputSpec
    output_spec = fcsv_to_hdf5OutputSpec
    _cmd = " fcsv_to_hdf5 "
    _outputs_filenames = {'landmarksInformationFile':'landmarksInformationFile.h5','modelFile':'modelFile'}
    _redirect_x = False


class insertMidACPCpointInputSpec(CommandLineInputSpec):
    inputLandmarkFile = File(argstr="--inputLandmarkFile %s", desc="Input landmark file (.fcsv)", exists=True)
    outputLandmarkFile = traits.Either(traits.Bool, File(), argstr="--outputLandmarkFile %s", desc="Output landmark file (.fcsv)", hash_files=False)


class insertMidACPCpointOutputSpec(TraitedSpec):
    outputLandmarkFile = File(desc="Output landmark file (.fcsv)", exists=True)


class insertMidACPCpoint(SEMLikeCommandLine):
    """title: MidACPC Landmark Insertion

category: Utilities.BRAINS

description: This program gets a landmark fcsv file and adds a new landmark as the midpoint between AC and PC points to the output landmark fcsv file

version: 5.2.0

contributor: Ali Ghayoor

"""

    input_spec = insertMidACPCpointInputSpec
    output_spec = insertMidACPCpointOutputSpec
    _cmd = " insertMidACPCpoint "
    _outputs_filenames = {'outputLandmarkFile':'outputLandmarkFile'}
    _redirect_x = False


class landmarksConstellationAlignerInputSpec(CommandLineInputSpec):
    inputLandmarksPaired = File(argstr="--inputLandmarksPaired %s", desc="Input landmark file (.fcsv)", exists=True)
    outputLandmarksPaired = traits.Either(traits.Bool, File(), argstr="--outputLandmarksPaired %s", desc="Output landmark file (.fcsv)", hash_files=False)


class landmarksConstellationAlignerOutputSpec(TraitedSpec):
    outputLandmarksPaired = File(desc="Output landmark file (.fcsv)", exists=True)


class landmarksConstellationAligner(SEMLikeCommandLine):
    """title: MidACPC Landmark Insertion

category: Utilities.BRAINS

description: This program converts the original landmark files to the acpc-aligned landmark files

version: 5.2.0

contributor: Ali Ghayoor

"""

    input_spec = landmarksConstellationAlignerInputSpec
    output_spec = landmarksConstellationAlignerOutputSpec
    _cmd = " landmarksConstellationAligner "
    _outputs_filenames = {'outputLandmarksPaired':'outputLandmarksPaired'}
    _redirect_x = False


class landmarksConstellationWeightsInputSpec(CommandLineInputSpec):
    inputTrainingList = File(argstr="--inputTrainingList %s", desc=",                 Setup file, giving all parameters for training up a Weight list for landmark.,             ", exists=True)
    inputTemplateModel = File(argstr="--inputTemplateModel %s", desc="User-specified template model.,             ", exists=True)
    LLSModel = File(argstr="--LLSModel %s", desc="Linear least squares model filename in HD5 format", exists=True)
    outputWeightsList = traits.Either(traits.Bool, File(), argstr="--outputWeightsList %s", desc=",                 The filename of a csv file which is a list of landmarks and their corresponding weights.,             ", hash_files=False)


class landmarksConstellationWeightsOutputSpec(TraitedSpec):
    outputWeightsList = File(desc=",                 The filename of a csv file which is a list of landmarks and their corresponding weights.,             ", exists=True)


class landmarksConstellationWeights(SEMLikeCommandLine):
    """title: Generate Landmarks Weights (BRAINS)

category: Utilities.BRAINS

description: Train up a list of Weights for the Landmarks in BRAINSConstellationDetector

"""

    input_spec = landmarksConstellationWeightsInputSpec
    output_spec = landmarksConstellationWeightsOutputSpec
    _cmd = " landmarksConstellationWeights "
    _outputs_filenames = {'outputWeightsList':'outputWeightsList.wts'}
    _redirect_x = False
